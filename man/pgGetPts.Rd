% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pgGet.R
\name{pgGetPts}
\alias{pgGet}
\alias{pgGetLines}
\alias{pgGetPolys}
\alias{pgGetPts}
\title{Load a PostGIS geometry in a PostgreSQL table/view into R.}
\usage{
pgGetPts(conn, name, geom = "geom", gid = NULL, other.cols = "*",
  query = NULL)

pgGetLines(conn, name, geom = "geom", gid = NULL, other.cols = "*",
  query = NULL)

pgGetPolys(conn, name, geom = "geom", gid = NULL, other.cols = "*",
  query = NULL)
}
\arguments{
\item{conn}{A connection object to a PostgreSQL database}

\item{name}{A character string specifying a PostgreSQL schema and
table/view name holding the geometry (e.g., `name =
c("schema","table")`)}

\item{geom}{The name of the geometry column. (Default = 'geom')}

\item{gid}{Name of the column in `name` holding the IDs. Should be
unique if additional columns of unique data are being
appended. \code{gid=NULL} (default) automatically creates a
new unique ID for each row in the `sp` object.}

\item{other.cols}{Names of specific columns in the table to
retrieve, comma seperated in one character element
(e.g. \code{other.cols='col1,col2'}. The default is to attach
all columns in a Spatial*DataFrame. Setting
\code{other.cols=NULL} will return a Spatial-only object (no
data).}

\item{query}{character, additional SQL to append to modify select
query from table. Must begin with "AND ..."; see below for
examples.}
}
\value{
Spatial(Multi)PointsDataFrame or Spatial(Multi)Points

SpatialLinesDataFrame or SpatialLines

SpatialPolygonsDataFrame or SpatialPolygons
}
\description{
Retrieve point, linestring, or polygon geometries from a PostGIS
table/view, and convert it to an R `sp` object (Spatial* or
Spatial*DataFrame).
}
\examples{
\dontrun{
## Retrieve a SpatialPointsDataFrame with all data from table
## 'schema.tablename', with geometry in the column 'geom'
pgGetPts(conn, c("schema", "tablename"))
## Return a SpatialPointsDataFrame with columns c1 & c2 as data
pgGetPts(conn, c("schema", "tablename"), other.cols = "c1,c2")
## Return a SpatialPoints, retaining id from table as rownames
pgGetPts(conn, c("schema", "tablename"), gid = "table_id", other.cols = FALSE)
}
\dontrun{
pgGetLines(conn, c("schema", "tablename"))
pgGetLines(conn, c("schema", "roads"), geom = "roadgeom", gid = "road_ID",
    other.cols = NULL, query = "AND field = 'highway'")
}
\dontrun{
pgGetPolys(conn, c("schema", "tablename"))
pgGetPolys(conn, c("schema", "states"), geom = "statesgeom",
    gid = "state_ID", other.cols = "area,population",
    query = "AND area > 1000000 ORDER BY population LIMIT 10")
}
}
\author{
David Bucklin \email{dbucklin@ufl.edu}

Mathieu Basille \email{basille@ufl.edu}
}

