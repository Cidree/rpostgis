% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pgInsertize.r
\name{pgInsertizeGeom}
\alias{pgInsertize}
\alias{pgInsertizeGeom}
\alias{print.pgi}
\title{Format R data objects (data frames, spatial data frames, or spatial-only objects) 
for insert into a PostgreSQL table (for use with pgInsert).}
\usage{
pgInsertizeGeom(data.obj, geom = "geom", create.table = NULL,
  force.match = NULL, conn = NULL, new.id = NULL, alter.names = TRUE)

pgInsertize(data.obj, create.table = NULL, force.match = NULL,
  conn = NULL, new.id = NULL, alter.names = TRUE)

\method{print}{pgi}(pgi)
}
\arguments{
\item{data.obj}{A Spatial* or Spatial*DataFrame, or data frame for \code{pgInsertize}.}

\item{geom}{character string, the name of geometry column in the database table. (existing or to be created; defaults to 'geom')}

\item{create.table}{character, schema and table of the PostgreSQL table to create (actual table creation will be 
done in later in pgInsert().) Column names will be converted to PostgreSQL-compliant names. Default is NULL (no new table created).}

\item{force.match}{character, schema and table of the PostgreSQL table to compare columns of data frame with. 
If specified, only columns in the data frame that exactly match the database table will be kept, and reordered
to match the database table. If NULL, all columns will be kept in the same order given in the data frame.}

\item{conn}{A database connection (if a table is given in for "force.match" parameter)}

\item{new.id}{character, name of a new sequential integer ID column to be added to the table. 
(for spatial objects without data frames, this column is created even if left NULL and defaults to the name 'gid')}

\item{alter.names}{Logical, whether to make database column and table names DB-compliant (remove special characters). Defualt is TRUE.
(This will need to be set to FALSE if matching to non-standard names in an existing database table using the \code{force.match} setting.)}

\item{pgi}{A list of class \code{pgi}, output from the pgInsertize() or pgInsertizeGeom() functions from the rpostgis package.}
}
\value{
pgi A list containing four character strings- a list containing four character strings- (1) in.table, the table name which will be 
created or inserted into, if specifed by either create.table or force.match (else NULL)
(2) db.new.table, the SQL statement to create the new table, if specified in create.table (else NULL), 
(3) db.cols.insert, a character string of the database column names to insert into, and 
(4) insert.data, a character string of the data to insert. See examples for 
usage within the \code{pgInsert} function.
}
\description{
These functions take an R \code{sp} object (Spatial* or Spatial*DataFrame; for \code{pgInsertizeGeom}) 
or data frame (for \code{pgInsertize}) and return a \code{pgi} list object, which
can be used in the function \code{pgInsert} to insert rows of the object into the database table. (Note
that these functions do not do any modification of the database, it only prepares the data for insert.) The
function \code{pgInsert} is a wrapper around these functions, so \code{pgInsertize*} should only be used in 
situations where data preparation and insert need to be seperated.
}
\details{
The entire data frame is prepared by default, unless \code{force.match} specifies a database table 
(along with a database connection \code{conn}), in which case the R column names are compared 
to the \code{force.match} column names, and only exact matches are formatted to be inserted.

A new database table can also be prepared to be created using the \code{create.table} argument. 
If \code{new.id} is specified, a new sequential integer field is added to the data frame. 
For \code{Spatial*}-only objects (no data frame), a new.id is created by default with name "gid". 
For \code{pgInsertizeGeom}, if the R package \code{wkb} is installed, this function uses \code{writeWKB} to translate the
geometries for some spatial types (faster with large datasets), otherwise the \code{rgeos} function \code{writeWKT} is used.
}
\examples{

library(sp)
data(meuse)
coords <- SpatialPoints(meuse[, c("x", "y")])
spdf<- SpatialPointsDataFrame(coords, meuse)

#format data for insert
pgi.new<-pgInsertizeGeom(spdf,geom="point_geom",create.table=c("schema","table"),new.id="pt_gid")
print(pgi.new)

\dontrun{

library(RPostgreSQL)
drv<-dbDriver("PostgreSQL")
conn<-dbConnect(drv,dbname='dbname',host='host',port='5432',
               user='user',password='password')

# insert data in database table (note that an error will be given if all 
# insert columns do not have exactly matching database table columns)
pgInsert(conn=conn,data.obj=pgi.new)


# Inserting into existing table
pgi.existing<-pgInsertizeGeom(spdf,geom="point_geom",force.match=c("schema","table"),conn=conn)
# A warning message is given, since the "dist.m" column is not found in the database table 
# (it was changed to "dist_m" in pgi.new to make name DB-compliant). 
# All other columns are prepared for insert.
print(pgi.existing)

pgInsert(conn=conn,data.obj=pgi.existing)
}

\dontrun{

#format regular (non-spatial) data frame for insert using pgInsertize

#connect to database
library(RPostgreSQL)
drv<-dbDriver("PostgreSQL")
conn<-dbConnect(drv,dbname='dbname',host='host',port='5432',
               user='user',password='password')
}

data<-data.frame(a=c(1,2,3),b=c(4,NA,6),c=c(7,'text',9))

#format non-spatial data frame for insert
values<-pgInsertize(data.obj=data)

\dontrun{
# insert data in database table (note that an error will be given if all insert columns 
# do not match exactly to database table columns)
pgInsert(conn,data.obj=values,name=c("schema","table"))

##
#run with forced matching of database table column names
values<-pgInsertize(data.obj=data,force.match=c("schema","table"),conn=conn)

pgInsert(conn,data.obj=values)
}
}
\author{
David Bucklin \email{david.bucklin@gmail.com}
}

