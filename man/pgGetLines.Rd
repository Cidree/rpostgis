% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pgGetLines.r
\name{pgGetLines}
\alias{pgGetLines}
\title{Retrieve line geometries from a PostGIS table, and convert it to a
SpatialLines or a SpatialLinesDataFrame.  title Load a linestring
geometry stored in a PostgreSQL database into R.}
\usage{
pgGetLines(conn, name, geom = "geom", gid = NULL, other.cols = "*",
  query = NULL)
}
\arguments{
\item{conn}{A connection object to a PostgreSQL database}

\item{name}{A character string specifying a PostgreSQL schema (if
necessary), and table or view name for the table holding the
lines geometry (e.g., name = c("schema","table"))}

\item{geom}{character, Name of the column in 'name' holding the
geometry object (Default = 'geom')}

\item{gid}{character, Name of the column in 'name' holding the ID
for each line. Should be unique if additional columns of
unique data are being appended. \code{gid=NULL} (default)
automatically creates a new unique ID for each row in the
table.}

\item{other.cols}{character, names of additional columns from
table (comma-seperated) to append to dataset (Default is all
columns, NULL returns a SpatialLines object)}

\item{query}{character, additional SQL to append to modify select
query from table}
}
\value{
SpatialLinesDataFrame or SpatialLines
}
\description{
Retrieve line geometries from a PostGIS table, and convert it to a
SpatialLines or a SpatialLinesDataFrame.  title Load a linestring
geometry stored in a PostgreSQL database into R.
}
\examples{
\dontrun{
drv <- dbDriver("PostgreSQL")
conn <- dbConnect(drv, dbname = "dbname", host = "host", port = "5432",
    user = "user", password = "password")
pgGetLines(conn, c("schema", "tablename"))
pgGetLines(conn, c("schema", "roads"), geom = "roadgeom", gid = "road_ID",
    other.cols = NULL, query = "AND field = 'highway'")
}
}
\author{
David Bucklin \email{david.bucklin@gmail.com}
}

