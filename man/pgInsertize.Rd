% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pgInsertize.r
\name{pgInsertize}
\alias{pgInsertize}
\alias{print.pgi}
\title{Formats an R data frame for insert into a PostgreSQL table (for use with pgInsert)}
\usage{
pgInsertize(df, create.table = NULL, force.match = NULL, conn = NULL,
  new.id = NULL, alter.names = TRUE)

\method{print}{pgi}(pgi)
}
\arguments{
\item{df}{A data frame}

\item{create.table}{character, schema and table of the PostgreSQL table to create (actual table creation will be 
done in later in pgInsert().) Column names will be converted to PostgreSQL-compliant names. Default is NULL (no new table created).}

\item{force.match}{character, schema and table of the PostgreSQL table to compare columns of data frame with 
If specified, only columns in the data frame that exactly match the database table will be kept, and reordered
to match the database table. Default is NULL (all columns names will be kept, and in the same order given in the data frame.)}

\item{conn}{A database connection (required if a table is given in for "force.match" parameter)}

\item{new.id}{character, name of a new sequential integer ID column to be added to the table.}

\item{alter.names}{Logical, whether to make column and table names DB-compliant (remove special characters). Defualt is TRUE.}

\item{object}{A list of class \code{pgi}, output from the pgInsertize() or pgInsertizeGeom() functions from the rpostgis package.}
}
\value{
pgi object, a list containing four character strings- (1) in.table, the table name which will be 
created or inserted into, if specifed by either create.table or force.match (else NULL)
(2) db.new.table, the SQL statement to create the new table, if specified in create.table (else NULL), 
(3) db.cols.insert, a character string of the database column names to insert into, and 
(4) insert.data, a character string of the data to insert. See examples for 
usage within the \code{pgInsert} function.
}
\description{
This function takes an R data frame and returns a \code{pgi} list object, which
is used in the function \code{pgInsert} to insert rows of the data frame into the database table. (Note
that this function does not do any modification of the database, it only prepares the R data frame for insert.)
The entire data frame is prepared by default, unless \code{force.match} specifies a database table (along with a database connection \code{conn}),
in which case the R column names are compared to the \code{force.match} column names, and only
exact matches are formatted to be inserted. A new database table can also be prepared to be
created (if so, the actual table is created in \code{pgInsert}) using the \code{create.table} argument. If
\code{new.id} is specified, a new sequential integer field is added to the data frame. Note: for inserting
Spatial* and Spatial*DataFrames types (from \code{sp} package), use the function \code{pgInsertizeGeom}.
}
\examples{

\dontrun{
#connect to database
library(RPostgreSQL)
drv<-dbDriver("PostgreSQL")
conn<-dbConnect(drv,dbname='dbname',host='host',port='5432',
               user='user',password='password')
}

data<-data.frame(a=c(1,2,3),b=c(4,NA,6),c=c(7,'text',9))

#format all columns for insert
values<-pgInsertize(df=data)

\dontrun{
# insert data in database table (note that an error will be given if all insert columns 
# do not match exactly to database table columns)
pgInsert(conn,pgi=values,name=c("schema","table"))

##
#run with forced matching of database table column names
values<-pgInsertize(df=data,force.match=c("schema","table"),conn=conn)

pgInsert(conn,pgi=values)
}
}
\author{
David Bucklin \email{david.bucklin@gmail.com}
}

