% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pgInsert.R
\name{pgInsert}
\alias{pgInsert}
\alias{print.pgi}
\title{Inserts data into a PostgreSQL table.}
\usage{
pgInsert(conn, name, data.obj, geom = "geom", partial.match = FALSE,
  overwrite = FALSE, new.id = NULL, alter.names = TRUE, encoding = NULL,
  return.pgi = FALSE)

\method{print}{pgi}(x, ...)
}
\arguments{
\item{conn}{A connection object to a PostgreSQL database}

\item{name}{Character, schema and table of the PostgreSQL table to
insert into. If not already existing, the table will be
created. If the table already exists, the function will check
if all R data frame columns match database columns, and if so,
do the insert. If not, the insert will be aborted. The
argument \code{partial.match} allows for inserts with only
partial matches of data frame and database column names, and
\code{overwrite} allows for overwriting the existing database
table.}

\item{data.obj}{A Spatial* or Spatial*DataFrame, or data frame}

\item{geom}{character string. For Spatial* datasets, the name of
geometry column in the database table.  (existing or to be
created; defaults to \code{"geom"}).}

\item{partial.match}{Logical; allow insert on partial column
matches between data frame and database table. If \code{TRUE},
columns in R data frame will be compared with the existing
database table \code{name}.  Columns in the data frame that
exactly match the database table will be inserted into the
database table.}

\item{overwrite}{Logical; if true, a new table (\code{name}) will
overwrite the existing table (\code{name}) in the database.}

\item{new.id}{Character, name of a new sequential integer ID
column to be added to the table for insert (for spatial objects without
data frames, this column is created even if left \code{NULL}
and defaults to the name \code{"gid"}). If \code{partial.match
= TRUE} and the column does not exist in the databse table,
it will be discarded.}

\item{alter.names}{Logical, whether to make database column names
DB-compliant (remove special characters). Default is
\code{TRUE}.  (This should to be set to \code{FALSE} to match
to non-standard names in an existing database table.)}

\item{encoding}{Character vector of length 2, containing the
from/to encodings for the data (as in the function
\code{iconv}). For example, if the dataset contain certain
latin characters (e.g., accent marks), and the database is in
UTF-8, use \code{encoding = c("latin1", "UTF-8")}. Left
\code{NULL}, no conversion will be done.}

\item{return.pgi}{Whether to return a formatted list of insert parameters
(i.e., a \code{pgi} object; see function details.)}

\item{x}{A list of class \code{pgi}}

\item{...}{Further arguments not used.}
}
\value{
Returns \code{TRUE} if the insertion was successful, or a
\code{pgi} object if specified, or in the case of database error.
}
\description{
This function takes a take an R \code{sp} object (Spatial* or
Spatial*DataFrame), or a regular data frame, and performs the
database insert (and table creation, when the table doesn't exist)
on the database.
}
\details{
If \code{new.id} is specified, a new sequential integer field is
added to the data frame for insert. For \code{Spatial*}-only
objects (no data frame), a new.id is created by default with name
"gid".

If the R package \code{wkb} is installed, this function will use
\code{writeWKB} for certain datasets (non-Multi types,
non-Linestring), which is faster for large datasets.  In all other
cases the \code{rgeos} function \code{writeWKT} is used.

In the event of function or database error, the database uses
ROLLBACK to revert to the previous state.

On database errors, or if the user specifies \code{return.pgi = TRUE},
the function will return a \code{pgi} object (see next paragraph). This
object can be re-used as the \code{data.obj} in \code{pgInsert}; (e.g., when
inserting the exact same data into tables in two separate tables or databases). 
If \code{return.pgi = FALSE} (default), the function will return \code{TRUE},
indicating successful insert.

pgi objects are a list containing four character strings: (1)
in.table, the table name which will be created or inserted
into (2) db.new.table, the SQL statement to create the new
table, (3) db.cols.insert, a character string of the database column
names to insert into, and (4) insert.data, a character string
of the data to insert.
}
\examples{
\dontrun{
library(sp)
data(meuse)
coords <- SpatialPoints(meuse[, c("x", "y")])
spdf <- SpatialPointsDataFrame(coords, meuse)

## Insert data in new database table
pgInsert(conn, name = c("public", "meuse_data"), data.obj = spdf)

## The same command will insert into already created table (if all R
## columns match)
pgInsert(conn, name = c("public", "meuse_data"), data.obj = spdf)

## If not all database columns match, need to use partial.match = TRUE
colnames(spdf@data)[4] <- "cu"
pgInsert(conn, name = c("public", "meuse_data"), data.obj = spdf,
    partial.match = TRUE)
}
}
\author{
David Bucklin \email{dbucklin@ufl.edu}
}

