% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pgInsert.R
\name{pgInsert}
\alias{pgInsert}
\title{Inserts data from spatial objects or data frames into a
    PostgreSQL table}
\usage{
pgInsert(conn, data.obj, create.table = NULL, force.match = NULL,
  geom = "geom", new.id = NULL, alter.names = TRUE, encoding = NULL)
}
\arguments{
\item{conn}{A connection object to a PostgreSQL database}

\item{data.obj}{A Spatial* or Spatial*DataFrame, or data frame}

\item{create.table}{Character, schema and table of the PostgreSQL
table to create.  Column names will be converted to
PostgreSQL-compliant names. Default is \code{NULL} (no new
table created).}

\item{force.match}{Character, schema and table of the PostgreSQL
table to compare columns of data frame with.  If specified,
only columns in the data frame that exactly match the database
table will be kept, and reordered to match the database table.}

\item{geom}{character string. For Spatial* datasets, the name of
geometry column in the database table.  (existing or to be
created; defaults to \code{geom}).}

\item{new.id}{Character, name of a new sequential integer ID
column to be added to the table.  (for spatial objects without
data frames, this column is created even if left \code{NULL}
and defaults to the name \code{gid}).  Must match an existing
column name (and numeric type) when used with
\code{force.match}, otherwise it will be discarded.}

\item{alter.names}{Logical, whether to make database column names
DB-compliant (remove special characters). Default is
\code{TRUE}.  (This should to be set to \code{FALSE} to match
to non-standard names in an existing database table using the
\code{force.match} setting.)}

\item{encoding}{Character vector of length 2, containing the
from/to encodings for the data (as in the function
\code{iconv}). For example, if the dataset contain certain
latin characters (e.g., accent marks), and the database is in
UTF-8, use \code{encoding = c("latin1","UTF-8")}. Left
\code{NULL}, no conversion will be done.}
}
\value{
DBIResult
}
\description{
This function takes a take an R \code{sp} object (Spatial* or
Spatial*DataFrame), or a regular data frame, and performs the
database insert (and table creation, if specified) on the
database. The entire data frame is prepared, but if
\code{force.match} specifies a database table, the R column names
are compared to the \code{force.match} column names, and only
exact matches are formatted to be inserted. A new database table
can also be created using the \code{create.table} argument. If
\code{new.id} is specified, a new sequential integer field is
added to the data frame for insert. For \code{Spatial*}-only
objects (no data frame), a new.id is created by default with name
"gid".
}
\details{
If the R package \code{wkb} is installed, this function will use
\code{writeWKB} for certain datasets (non-Multi types,
non-Linestring), which is faster for large datasets.  In all other
cases the \code{rgeos} function \code{writeWKT} is used.

If the table is created but the data insert statement fails,
\code{create.table} is dropped from the database (a message will
be given).
}
\examples{
\dontrun{
library(sp)
data(meuse)
coords <- SpatialPoints(meuse[, c("x", "y")])
spdf <- SpatialPointsDataFrame(coords, meuse)

library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
conn <- dbConnect(drv, dbname = "dbname", host = "host", port = "5432",
    user = "user", password = "password")

## Insert data in new database table
pgInsert(conn, data.obj = spdf, create.table = c("public", "meuse_data"))

## Insert into already created table
pgInsert(conn, data.obj = spdf, force.match = c("public", "meuse_data"))
}
}
\author{
David Bucklin \email{dbucklin@ufl.edu}
}

