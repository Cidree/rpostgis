[{"path":"https://cidree.github.io/rpostgis/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adrian Cidre Gonzalez. Author, maintainer. Mathieu Basille. Author. David Bucklin. Author.","code":""},{"path":"https://cidree.github.io/rpostgis/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bucklin, D. & Basille, M. (2018). rpostgis: linking R PostGIS spatial database. R Journal, 10(1), 251-268. https://journal.r-project.org/archive/2018/RJ-2018-025/index.html","code":"@Article{,   title = {rpostgis: linking R with a PostGIS spatial database},   author = {David Bucklin and Mathieu Basille},   journal = {The R Journal},   volume = {10},   number = {1},   pages = {251-268},   year = {2018},   url = {https://journal.r-project.org/archive/2018/RJ-2018-025/index.html}, }"},{"path":"https://cidree.github.io/rpostgis/index.html","id":"rpostgis-","dir":"","previous_headings":"","what":"rpostgis","title":"R Interface to a PostGIS Database","text":"rpostgis package provides interface R PostGIS-enabled PostgreSQL databases transparently transfer spatial data. vector (points, lines, polygons) raster data supported read write modes. Also provides convenience functions execute common procedures PostgreSQL/PostGIS.","code":""},{"path":"https://cidree.github.io/rpostgis/index.html","id":"installation-of-the-released-versions","dir":"","previous_headings":"","what":"Installation of the released versions","title":"R Interface to a PostGIS Database","text":"can install latest released version CRAN:","code":"pak::pak(\"rpostgis\")"},{"path":"https://cidree.github.io/rpostgis/index.html","id":"installation-of-the-development-versions","dir":"","previous_headings":"","what":"Installation of the development versions","title":"R Interface to a PostGIS Database","text":"stable version package always available project’s GitHub page, may ahead CRAN version. install , use following command: latest (possibly unstable) development version, use:","code":"pak::pak(\"Cidree/rpostgis\") remotes::install_github(\"Cidree/rpostgis\", ref = \"dev\")"},{"path":"https://cidree.github.io/rpostgis/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"R Interface to a PostGIS Database","text":"rpostgis relies working connection provided RPostgreSQL package PostgreSQL database, e.g.: Note: rpostgis 1.4.3 RPostgres::Postgres() driver also allowed connection objects; however, considered experimental recommended use cases. connection established, first step check database PostGIS already installed (install ’s case): function returns TRUE, database ready functional. can check geometries rasters present database : terminate session, close clear connection :","code":"conn <- RPostgreSQL::dbConnect(   drv      = \"PostgreSQL\",    host     = \"localhost\",   dbname   = \"<DB_NAME>\",    user     = \"<USER>\",    password = \"<PASSWORD>\" ) pgPostGIS(conn) pgListGeom(conn, geog = TRUE) pgListRast(conn) RPostgreSQL::dbDisconnect(conn)"},{"path":"https://cidree.github.io/rpostgis/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"R Interface to a PostGIS Database","text":"Full documentation complete list functions package can found rpostgis homepage.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/bs.html","id":null,"dir":"Reference","previous_headings":"","what":"Return indexes for an exact number of blocks for a raster — bs","title":"Return indexes for an exact number of blocks for a raster — bs","text":"Return indexes exact number blocks raster","code":""},{"path":"https://cidree.github.io/rpostgis/reference/bs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return indexes for an exact number of blocks for a raster — bs","text":"","code":"bs(r, blocks)"},{"path":"https://cidree.github.io/rpostgis/reference/bs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return indexes for an exact number of blocks for a raster — bs","text":"r RasterLayer SpatRaster object blocks Number desired blocks (columns, rows)","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbAddKey.html","id":null,"dir":"Reference","previous_headings":"","what":"Add key. — dbAddKey","title":"Add key. — dbAddKey","text":"Add primary foreign key table column.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbAddKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add key. — dbAddKey","text":"","code":"dbAddKey(   conn,   name,   colname,   type = c(\"primary\", \"foreign\"),   reference,   colref,   display = TRUE,   exec = TRUE )"},{"path":"https://cidree.github.io/rpostgis/reference/dbAddKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add key. — dbAddKey","text":"conn connection object. name character string, character vector, specifying PostgreSQL table name. colname character string specifying name column key assign; alternatively, character vector specifying name columns keys spanning one column. type type key, either \"primary\" \"foreign\" reference character string specifying foreign table name foreign key associated (ignored type == \"primary\"). colref character string specifying name primary key foreign table foreign key associated; alternatively, character vector specifying name columns keys spanning one column (ignored type == \"primary\"). display Logical. Whether display query (defaults TRUE). exec Logical. Whether execute query (defaults TRUE).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbAddKey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add key. — dbAddKey","text":"exec = TRUE, returns (invisibly) TRUE key successfully added.","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/dbAddKey.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add key. — dbAddKey","text":"Mathieu Basille mathieu@basille.org","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbAddKey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add key. — dbAddKey","text":"","code":"## Examples use a dummy connection from DBI package conn <- DBI::ANSI()  ## Primary key dbAddKey(conn, name = c(\"sch1\", \"tbl1\"), colname = \"id1\", exec = FALSE) #> ℹ ALTER TABLE \"sch1\".\"tbl1\" ADD PRIMARY KEY (\"id1\"); #> ✖ Query not executed  ## Primary key using multiple columns dbAddKey(conn, name = c(\"sch1\", \"tbl1\"), colname = c(\"id1\", \"id2\",     \"id3\"), exec = FALSE) #> ℹ ALTER TABLE \"sch1\".\"tbl1\" ADD PRIMARY KEY (\"id1\", \"id2\", \"id3\"); #> ✖ Query not executed  ## Foreign key dbAddKey(conn, name = c(\"sch1\", \"tbl1\"), colname = \"id\", type = \"foreign\",     reference = c(\"sch2\", \"tbl2\"), colref = \"id\", exec = FALSE) #> ℹ ALTER TABLE \"sch1\".\"tbl1\" ADD FOREIGN KEY (\"id\") REFERENCES \"sch2\".\"tbl2\" (\"id\"); #> ✖ Query not executed  ## Foreign key using multiple columns dbAddKey(conn, name = c(\"sch1\", \"tbl1\"), colname = c(\"id1\", \"id2\"),     type = \"foreign\", reference = c(\"sch2\", \"tbl2\"), colref = c(\"id3\",         \"id4\"), exec = FALSE) #> ℹ ALTER TABLE \"sch1\".\"tbl1\" ADD FOREIGN KEY (\"id1\", \"id2\") REFERENCES \"sch2\".\"tbl2\" (\"id3\", \"id4\"); #> ✖ Query not executed"},{"path":"https://cidree.github.io/rpostgis/reference/dbAsDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts to timestamp. — dbAsDate","title":"Converts to timestamp. — dbAsDate","text":"Convert date field timestamp without time zone.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbAsDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts to timestamp. — dbAsDate","text":"","code":"dbAsDate(conn, name, date = \"date\", tz = NULL, display = TRUE, exec = TRUE)"},{"path":"https://cidree.github.io/rpostgis/reference/dbAsDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts to timestamp. — dbAsDate","text":"conn connection object. name character string specifying PostgreSQL table name. date character string specifying date field. tz character string specifying time zone, \"EST\", \"America/New_York\", \"EST5EDT\", \"-5\". display Logical. Whether display query (defaults TRUE). exec Logical. Whether execute query (defaults TRUE).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbAsDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts to timestamp. — dbAsDate","text":"exec = TRUE, returns (invisibly) TRUE conversion successful.","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/dbAsDate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts to timestamp. — dbAsDate","text":"Mathieu Basille mathieu@basille.org","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbAsDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts to timestamp. — dbAsDate","text":"","code":"## Example uses a dummy connection from DBI package conn <- DBI::ANSI() dbAsDate(conn, name = c(\"schema\", \"table\"), date = \"date\", tz = \"GMT\",     exec = FALSE) #> ℹ ALTER TABLE \"schema\".\"table\" #> ALTER COLUMN \"date\" TYPE timestamptz #> USING #>     \"date\"::timestamp AT TIME ZONE 'GMT'; #> ✖ Query not executed"},{"path":"https://cidree.github.io/rpostgis/reference/dbBuildTableQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds CREATE TABLE query for a data frame object. — dbBuildTableQuery","title":"Builds CREATE TABLE query for a data frame object. — dbBuildTableQuery","text":"Builds CREATE TABLE query data frame object.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbBuildTableQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds CREATE TABLE query for a data frame object. — dbBuildTableQuery","text":"","code":"dbBuildTableQuery(   conn = NULL,   name,   obj,   field.types = NULL,   row.names = FALSE )"},{"path":"https://cidree.github.io/rpostgis/reference/dbBuildTableQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds CREATE TABLE query for a data frame object. — dbBuildTableQuery","text":"conn PostgreSQL connection name Table name string, length 1-2. obj data frame object. field.types optional named list types field obj row.names logical, row.name obj exported row_names field? Default FALSE","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbBuildTableQuery.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Builds CREATE TABLE query for a data frame object. — dbBuildTableQuery","text":"Adapted RPostgreSQL::postgresqlBuildTableDefinition","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or remove a column. — dbColumn","title":"Add or remove a column. — dbColumn","text":"Add remove column /table.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or remove a column. — dbColumn","text":"","code":"dbColumn(   conn,   name,   colname,   action = c(\"add\", \"drop\"),   coltype = \"integer\",   cascade = FALSE,   display = TRUE,   exec = TRUE )"},{"path":"https://cidree.github.io/rpostgis/reference/dbColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or remove a column. — dbColumn","text":"conn connection object. name character string specifying PostgreSQL table name. colname character string specifying name column action character string specifying column added (\"add\", default) removed (\"drop\"). coltype character string indicating type column, action = \"add\". cascade Logical. Whether drop foreign key constraints tables, action = \"drop\". display Logical. Whether display query (defaults TRUE). exec Logical. Whether execute query (defaults TRUE).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or remove a column. — dbColumn","text":"exec = TRUE, returns (invisibly) TRUE column successfully added removed.","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/dbColumn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add or remove a column. — dbColumn","text":"Mathieu Basille mathieu@basille.org","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or remove a column. — dbColumn","text":"","code":"## examples use a dummy connection from DBI package conn<-DBI::ANSI() ## Add an integer column dbColumn(conn, name = c(\"schema\", \"table\"), colname = \"field\", exec = FALSE) #> ℹ ALTER TABLE \"schema\".\"table\" ADD COLUMN \"field\" integer; #> ✖ Query not executed ## Drop a column (with CASCADE) dbColumn(conn, name = c(\"schema\", \"table\"), colname = \"field\", action = \"drop\",     cascade = TRUE, exec = FALSE) #> ℹ ALTER TABLE \"schema\".\"table\" DROP COLUMN \"field\" CASCADE; #> ✖ Query not executed"},{"path":"https://cidree.github.io/rpostgis/reference/dbComment.html","id":null,"dir":"Reference","previous_headings":"","what":"Comment table/view/schema. — dbComment","title":"Comment table/view/schema. — dbComment","text":"Comment table, view schema.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbComment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comment table/view/schema. — dbComment","text":"","code":"dbComment(   conn,   name,   comment,   type = c(\"table\", \"view\", \"schema\"),   display = TRUE,   exec = TRUE )"},{"path":"https://cidree.github.io/rpostgis/reference/dbComment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comment table/view/schema. — dbComment","text":"conn connection object. name character string specifying PostgreSQL table, view schema name. comment character string specifying comment. type type object comment, either \"table\", \"view\", \"schema\" display Logical. Whether display query (defaults TRUE). exec Logical. Whether execute query (defaults TRUE).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbComment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comment table/view/schema. — dbComment","text":"exec = TRUE, returns (invisibly) TRUE comment successfully applied.","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/dbComment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Comment table/view/schema. — dbComment","text":"Mathieu Basille mathieu@basille.org","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbComment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comment table/view/schema. — dbComment","text":"","code":"## examples use a dummy connection from DBI package conn <- DBI::ANSI() dbComment(conn, name = c(\"schema\", \"table\"), comment = \"Comment on a view.\",     type = \"view\", exec = FALSE) #> ℹ COMMENT ON VIEW \"schema\".\"table\" IS 'Comment on a view.'; #> ✖ Query not executed dbComment(conn, name = \"test_schema\", comment = \"Comment on a schema.\", type = \"schema\",     exec = FALSE) #> ℹ COMMENT ON SCHEMA \"test_schema\" IS 'Comment on a schema.'; #> ✖ Query not executed"},{"path":"https://cidree.github.io/rpostgis/reference/dbConnCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a supported PostgreSQL connection — dbConnCheck","title":"Check if a supported PostgreSQL connection — dbConnCheck","text":"Check supported PostgreSQL connection","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbConnCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a supported PostgreSQL connection — dbConnCheck","text":"","code":"dbConnCheck(conn)"},{"path":"https://cidree.github.io/rpostgis/reference/dbConnCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a supported PostgreSQL connection — dbConnCheck","text":"conn PostgreSQL connection","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbDrop.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop table/view/schema. — dbDrop","title":"Drop table/view/schema. — dbDrop","text":"Drop table, view schema.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbDrop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop table/view/schema. — dbDrop","text":"","code":"dbDrop(   conn,   name,   type = c(\"table\", \"schema\", \"view\", \"materialized view\"),   ifexists = FALSE,   cascade = FALSE,   display = TRUE,   exec = TRUE )"},{"path":"https://cidree.github.io/rpostgis/reference/dbDrop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop table/view/schema. — dbDrop","text":"conn connection object. name character string specifying PostgreSQL table, schema, view name. type type object drop, either \"table\", \"schema\", \"view\", \"materialized view\". ifexists throw error object exist. notice issued case. cascade Automatically drop objects depend object (views). display Logical. Whether display query (defaults TRUE). exec Logical. Whether execute query (defaults TRUE).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbDrop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop table/view/schema. — dbDrop","text":"exec = TRUE, returns (invisibly) TRUE table/schema/view successfully dropped.","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/dbDrop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Drop table/view/schema. — dbDrop","text":"Mathieu Basille mathieu@basille.org","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbDrop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop table/view/schema. — dbDrop","text":"","code":"## examples use a dummy connection from DBI package conn <- DBI::ANSI() dbDrop(conn, name = c(\"schema\", \"view_name\"), type = \"view\", exec = FALSE) #> ℹ DROP VIEW \"schema\".\"view_name\"; #> ✖ Query not executed dbDrop(conn, name = \"test_schema\", type = \"schema\", cascade = \"TRUE\", exec = FALSE) #> ℹ DROP SCHEMA \"test_schema\" CASCADE; #> ✖ Query not executed"},{"path":"https://cidree.github.io/rpostgis/reference/dbExistsTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a PostgreSQL table/view exists — dbExistsTable","title":"Check if a PostgreSQL table/view exists — dbExistsTable","text":"Check PostgreSQL table/view exists","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbExistsTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a PostgreSQL table/view exists — dbExistsTable","text":"","code":"dbExistsTable(conn, name, table.only = FALSE)"},{"path":"https://cidree.github.io/rpostgis/reference/dbExistsTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a PostgreSQL table/view exists — dbExistsTable","text":"conn PostgreSQL connection name Table/view name string, length 1-2.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbGetDefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get definitions for data frame mode reading — dbGetDefs","title":"Get definitions for data frame mode reading — dbGetDefs","text":"Get definitions data frame mode reading","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbGetDefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get definitions for data frame mode reading — dbGetDefs","text":"","code":"dbGetDefs(conn, name)"},{"path":"https://cidree.github.io/rpostgis/reference/dbGetDefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get definitions for data frame mode reading — dbGetDefs","text":"conn PostgreSQL connection name Table/view name string, length 1-2.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an index. — dbIndex","title":"Create an index. — dbIndex","text":"Defines new index PostgreSQL table.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an index. — dbIndex","text":"","code":"dbIndex(   conn,   name,   colname,   idxname,   unique = FALSE,   method = c(\"btree\", \"hash\", \"rtree\", \"gist\"),   display = TRUE,   exec = TRUE )"},{"path":"https://cidree.github.io/rpostgis/reference/dbIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an index. — dbIndex","text":"conn connection object. name character string specifying PostgreSQL table name. colname character string, character vector specifying name column key associated; alternatively, character vector specifying name columns build index. idxname character string specifying name index created. default, uses name table (without schema) name columns follows: <table_name>_<column_names>_idx. unique Logical. Causes system check duplicate values table index created (data already exist) time data added. Attempts insert update data result duplicate entries generate error. method name method used index. Choices \"btree\", \"hash\", \"rtree\", \"gist\". default method \"btree\", although \"gist\" index choice PostGIS spatial types (geometry, geography, raster). display Logical. Whether display query (defaults TRUE). exec Logical. Whether execute query (defaults TRUE).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an index. — dbIndex","text":"exec = TRUE, returns (invisibly) TRUE index successfully created.","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/dbIndex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create an index. — dbIndex","text":"Mathieu Basille mathieu@basille.org","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an index. — dbIndex","text":"","code":"## Examples use a dummy connection from DBI package conn <- DBI::ANSI()  ## GIST index dbIndex(conn, name = c(\"sch\", \"tbl\"), colname = \"geom\", method = \"gist\",     exec = FALSE) #> ℹ CREATE INDEX \"tbl_geom_idx\" ON \"sch\".\"tbl\" USING GIST (\"geom\"); #> ✖ Query not executed  ## Regular BTREE index on multiple columns dbIndex(conn, name = c(\"sch\", \"tbl\"), colname = c(\"col1\", \"col2\",     \"col3\"), exec = FALSE) #> ℹ CREATE INDEX \"tbl_col1_col2_col3_idx\" ON \"sch\".\"tbl\" (\"col1\", \"col2\", \"col3\"); #> ✖ Query not executed"},{"path":"https://cidree.github.io/rpostgis/reference/dbSchema.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and create schema. — dbSchema","title":"Check and create schema. — dbSchema","text":"Checks existence, necessary, creates schema.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbSchema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and create schema. — dbSchema","text":"","code":"dbSchema(conn, name, display = TRUE, exec = TRUE)"},{"path":"https://cidree.github.io/rpostgis/reference/dbSchema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and create schema. — dbSchema","text":"conn connection object (required, even exec = FALSE). name character string specifying PostgreSQL schema name. display Logical. Whether display query (defaults TRUE). exec Logical. Whether execute query (defaults TRUE). Note: exec = FALSE, function still checks existence schema, create exists.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbSchema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and create schema. — dbSchema","text":"exec = TRUE, returns (invisible) TRUE schema exists (whether already available just created).","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/dbSchema.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check and create schema. — dbSchema","text":"Mathieu Basille mathieu@basille.org","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbSchema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and create schema. — dbSchema","text":"","code":"if (FALSE) { # \\dontrun{     dbSchema(conn, name = \"schema\", exec = FALSE) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/dbTableInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about table columns. — dbTableInfo","title":"Get information about table columns. — dbTableInfo","text":"Get information columns PostgreSQL table.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbTableInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about table columns. — dbTableInfo","text":"","code":"dbTableInfo(conn, name, allinfo = FALSE)"},{"path":"https://cidree.github.io/rpostgis/reference/dbTableInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about table columns. — dbTableInfo","text":"conn connection object PostgreSQL database. name character string specifying PostgreSQL schema (necessary), table view name (e.g., name = c(\"schema\", \"table\")). allinfo Logical, Get information table? Default column names, types, nullable, maximum length character columns.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbTableInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about table columns. — dbTableInfo","text":"data frame","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbTableInfo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get information about table columns. — dbTableInfo","text":"David Bucklin david.bucklin@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbTableInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about table columns. — dbTableInfo","text":"","code":"if (FALSE) { # \\dontrun{ dbTableInfo(conn, c(\"schema\", \"table\")) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/dbTableNameFix.html","id":null,"dir":"Reference","previous_headings":"","what":"Format input for database schema/table names. — dbTableNameFix","title":"Format input for database schema/table names. — dbTableNameFix","text":"Internal rpostgis function return common (length = 2) schema table name vector various table schema + table name inputs.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbTableNameFix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format input for database schema/table names. — dbTableNameFix","text":"","code":"dbTableNameFix(conn = NULL, t.nm, as.identifier = TRUE)"},{"path":"https://cidree.github.io/rpostgis/reference/dbTableNameFix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format input for database schema/table names. — dbTableNameFix","text":"conn connection object. Must provided can set NULL, dummy connection used. t.nm Table name string, length 1-2. .identifier Boolean whether return (schema,table) name database sanitized identifiers (TRUE) regular character (FALSE)","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbTableNameFix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format input for database schema/table names. — dbTableNameFix","text":"character vector length 2. character element (escaped) double-quotes .identifier = TRUE.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbTableNameFix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format input for database schema/table names. — dbTableNameFix","text":"","code":"if (FALSE) { # \\dontrun{ name <- c(\"schema\", \"table\") dbTableNameFix(conn,name)  ## Current search path schema is added to single-length character ## object (if only table is given) name <- \"table\" dbTableNameFix(conn, name)  ## Schema or table names with double quotes should be given exactly as ## they are (make sure to wrap in single quotes in R): name <- c('sch\"ema', '\"table\"') dbTableNameFix(conn, name) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/dbVacuum.html","id":null,"dir":"Reference","previous_headings":"","what":"Vacuum. — dbVacuum","title":"Vacuum. — dbVacuum","text":"Performs VACUUM (garbage-collect optionally analyze) table.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbVacuum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vacuum. — dbVacuum","text":"","code":"dbVacuum(   conn,   name,   full = FALSE,   verbose = FALSE,   analyze = TRUE,   display = TRUE,   exec = TRUE )"},{"path":"https://cidree.github.io/rpostgis/reference/dbVacuum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vacuum. — dbVacuum","text":"conn connection object. name character string specifying PostgreSQL table name. full Logical. Whether perform \"full\" vacuum, can reclaim space, takes much longer exclusively locks table. verbose Logical. Whether print detailed vacuum activity report table. analyze Logical. Whether update statistics used planner determine efficient way execute query (default TRUE). display Logical. Whether display query (defaults TRUE). exec Logical. Whether execute query (defaults TRUE).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbVacuum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vacuum. — dbVacuum","text":"exec = TRUE, returns (invisibly) TRUE query successfully executed.","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/dbVacuum.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vacuum. — dbVacuum","text":"Mathieu Basille mathieu@basille.org","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbVacuum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vacuum. — dbVacuum","text":"","code":"## examples use a dummy connection from DBI package conn <- DBI::ANSI() dbVacuum(conn, name = c(\"schema\", \"table\"), full = TRUE, exec = FALSE) #> ℹ VACUUM FULL ANALYZE \"schema\".\"table\"; #> ✖ Query not executed"},{"path":"https://cidree.github.io/rpostgis/reference/dbVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns major.minor version of PostgreSQL (for version checking) — dbVersion","title":"Returns major.minor version of PostgreSQL (for version checking) — dbVersion","text":"Returns major.minor version PostgreSQL (version checking)","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns major.minor version of PostgreSQL (for version checking) — dbVersion","text":"","code":"dbVersion(conn)"},{"path":"https://cidree.github.io/rpostgis/reference/dbVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns major.minor version of PostgreSQL (for version checking) — dbVersion","text":"conn PostgreSQL connection","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns major.minor version of PostgreSQL (for version checking) — dbVersion","text":"numeric vector length 3 major,minor,bug version.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbWriteDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Write/read in data frame mode to/from database table. — dbWriteDataFrame","title":"Write/read in data frame mode to/from database table. — dbWriteDataFrame","text":"Write data.frame similar (e.g. tibble) database table, column definitions, row names, new integer primary key column. Read back R dbReadDataFrame, recreates original data.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbWriteDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write/read in data frame mode to/from database table. — dbWriteDataFrame","text":"","code":"dbWriteDataFrame(conn, name, df, overwrite = FALSE, only.defs = FALSE)  dbReadDataFrame(conn, name, df = NULL)"},{"path":"https://cidree.github.io/rpostgis/reference/dbWriteDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write/read in data frame mode to/from database table. — dbWriteDataFrame","text":"conn connection object PostgreSQL database name Character, schema table PostgreSQL table df data frame write (dbReadDataFrame, allows update existing data.frame definitions stored database) overwrite Logical; TRUE, new table (name) overwrite existing table (name) database. Note: overwriting view must done manually (e.g., dbDrop()). .defs Logical; TRUE, table definitions written.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbWriteDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write/read in data frame mode to/from database table. — dbWriteDataFrame","text":"invisible TRUE successful write dbWriteDataFrame, data.frame dbReadDataFrame","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbWriteDataFrame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write/read in data frame mode to/from database table. — dbWriteDataFrame","text":"Writing data frame mode new database tables (overwriting existing one). save column names appear R, along column data types attributes. done adding metadata lookup table table's schema named \".R_df_defs\" (created present). also adds two fields fixed names database table: \".R_rownames\" (storing row.names data frame), \".db_pkid\", new integer primary key. Existing columns data.frame matching names automatically changed. rpostgis database table read functions dbReadDataFrame pgGetGeom use metadata created data frame mode recreate data.frame R, available. Otherwise, imported using default RPostgreSQL::dbGetQuery methods. spatial objects must written pgWriteGeom(). flexible writing data.frames database (including writing existing database tables), use pgWriteGeom() df.mode = FALSE.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbWriteDataFrame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write/read in data frame mode to/from database table. — dbWriteDataFrame","text":"David Bucklin david.bucklin@gmail.com Adrián Cidre González adrian.cidre@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/dbWriteDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write/read in data frame mode to/from database table. — dbWriteDataFrame","text":"","code":"if (FALSE) { # \\dontrun{ library(datasets)  ## Write the mtcars data.frame to the database: dbWriteDataFrame(conn, name = \"mtcars_data\", df = mtcars)  ## Reads it back into a different object: mtcars2 <- dbReadDataFrame(conn, name = \"mtcars_data\")  ## Check equality: all.equal(mtcars, mtcars2) ## Should return TRUE. } # }"},{"path":"https://cidree.github.io/rpostgis/reference/pgCheckGeom.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if geometry or geography column exists in a table, and return the column name for use in a query. — pgCheckGeom","title":"Check if geometry or geography column exists in a table, and return the column name for use in a query. — pgCheckGeom","text":"Check geometry geography column exists table, return column name use query.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgCheckGeom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if geometry or geography column exists in a table, and return the column name for use in a query. — pgCheckGeom","text":"","code":"pgCheckGeom(conn, name, geom)"},{"path":"https://cidree.github.io/rpostgis/reference/pgCheckGeom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if geometry or geography column exists in a table, and return the column name for use in a query. — pgCheckGeom","text":"conn PostgreSQL connection name table name formatted use query geom geometry geography column name","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetBoundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve bounding envelope of geometries or rasters. — pgGetBoundary","title":"Retrieve bounding envelope of geometries or rasters. — pgGetBoundary","text":"Retrieve bounding envelope (rectangle) geometries rasters PostGIS table sfc object.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetBoundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve bounding envelope of geometries or rasters. — pgGetBoundary","text":"","code":"pgGetBoundary(conn, name, geom = \"geom\", clauses = NULL, returnclass = \"sf\")"},{"path":"https://cidree.github.io/rpostgis/reference/pgGetBoundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve bounding envelope of geometries or rasters. — pgGetBoundary","text":"conn connection object PostgreSQL database name character string specifying PostgreSQL schema table/view name holding geometry (e.g., name = c(\"schema\",\"table\")) geom character string specifying name geometry column table name (Default = \"geom\"). Note raster objects need change default value clauses character, additional SQL append modify select query table. Must begin SQL clause (e.g., \"...\", \"ORDER ...\", \"LIMIT ...\"); usage pgGetGeom. returnclass 'sf' default; 'terra' SpatVector; 'sp' sp objects.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetBoundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve bounding envelope of geometries or rasters. — pgGetBoundary","text":"object class sfc (list-column geometries); SpatVector sp object","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetBoundary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve bounding envelope of geometries or rasters. — pgGetBoundary","text":"David Bucklin david.bucklin@gmail.com Adrian Cidre González adrian.cidre@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetBoundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve bounding envelope of geometries or rasters. — pgGetBoundary","text":"","code":"if (FALSE) { # \\dontrun{ pgGetBoundary(conn, c(\"schema\", \"polys\"), geom = \"geom\") pgGetBoundary(conn, c(\"schema\", \"rasters\"), geom = \"rast\") } # }"},{"path":"https://cidree.github.io/rpostgis/reference/pgGetGeom.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a PostGIS geometry from a PostgreSQL table/view/query into R. — pgGetGeom","title":"Load a PostGIS geometry from a PostgreSQL table/view/query into R. — pgGetGeom","text":"Retrieve geometries PostGIS table/view/query, convert R sf object.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetGeom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a PostGIS geometry from a PostgreSQL table/view/query into R. — pgGetGeom","text":"","code":"pgGetGeom(   conn,   name,   geom = \"geom\",   gid = NULL,   other.cols = TRUE,   clauses = NULL,   boundary = NULL,   query = NULL,   returnclass = \"sf\" )"},{"path":"https://cidree.github.io/rpostgis/reference/pgGetGeom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a PostGIS geometry from a PostgreSQL table/view/query into R. — pgGetGeom","text":"conn connection object PostgreSQL database name character string specifying PostgreSQL schema table/view name holding geometry (e.g., name = c(\"schema\",\"table\")) geom name geometry/(geography) column. (Default = \"geom\") gid Name column name holding IDs. unique record return. gid=NULL (default) automatically creates new unique ID row sf object. .cols Names specific columns table retrieve, character vector (e.g. .cols.=c(\"col1\",\"col2\").) default (.cols = TRUE) attach columns. Setting .cols=FALSE return Spatial-object without attributes (data frame). clauses character, additional SQL append modify select query table. Must begin SQL clause (e.g., \"...\", \"ORDER ...\", \"LIMIT ...\"); see examples. boundary sf, SpatVector sp object; numeric. spatial object provided, bounding box used select geometries import. Alternatively, numeric vector (c([top], [bottom], [right], [left])) indicating projection-specific limits subset spatial data. value provided, default boundary = NULL apply boundary subset. query character, full SQL query including geometry column. use query mode (see details). returnclass 'sf' default; 'terra' SpatVector; 'sp' sp objects.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetGeom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a PostGIS geometry from a PostgreSQL table/view/query into R. — pgGetGeom","text":"sf, SpatVector sp object","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetGeom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a PostGIS geometry from a PostgreSQL table/view/query into R. — pgGetGeom","text":"features table retrieve must geometry type. query mode version pgGetGeom allows user enter complete SQL query (query) returns Geometry column, save query new view (name) desired. (name) specified, temporary view name \".rpostgis_TEMPview\" used within function execution. mode, arguments can used normally modify Spatial* object returned query.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetGeom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load a PostGIS geometry from a PostgreSQL table/view/query into R. — pgGetGeom","text":"David Bucklin david.bucklin@gmail.com Mathieu Basille mathieu@basille.org Adrián Cidre González adrian.cidre@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetGeom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a PostGIS geometry from a PostgreSQL table/view/query into R. — pgGetGeom","text":"","code":"if (FALSE) { # \\dontrun{ ## Retrieve a sf with all data from table ## 'schema.tablename', with geometry in the column 'geom' pgGetGeom(conn, c(\"schema\", \"tablename\")) ## Return a sf with columns c1 & c2 as data pgGetGeom(conn, c(\"schema\", \"tablename\"), other.cols = c(\"c1\",\"c2\")) ## Return a spatial-only (no data frame), ## retaining id from table as rownames pgGetGeom(conn, c(\"schema\", \"tablename\"), gid = \"table_id\",   other.cols = FALSE) ## Return a spatial-only (no data frame), ## retaining id from table as rownames and with a subset of the data pgGetGeom(conn, c(\"schema\", \"roads\"), geom = \"roadgeom\", gid = \"road_ID\",     other.cols = FALSE, clauses  = \"WHERE road_type = 'highway'\") ## Query mode pgGetGeom(conn, query = \"SELECT r.gid as id, ST_Buffer(r.geom, 100) as geom                            FROM                              schema.roads r,                              schema.adm_boundaries b                            WHERE                              ST_Intersects(r.geom, b.geom);\") } # }"},{"path":"https://cidree.github.io/rpostgis/reference/pgGetGeomQ.html","id":null,"dir":"Reference","previous_headings":"","what":"Load geometries from a full query and return a Spatial* object — pgGetGeomQ","title":"Load geometries from a full query and return a Spatial* object — pgGetGeomQ","text":"Load geometries full query return Spatial* object","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetGeomQ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load geometries from a full query and return a Spatial* object — pgGetGeomQ","text":"","code":"pgGetGeomQ(conn, query, name = NULL, ...)"},{"path":"https://cidree.github.io/rpostgis/reference/pgGetGeomQ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load geometries from a full query and return a Spatial* object — pgGetGeomQ","text":"query character, full SQL query including geometry column. name optional character string specifying PostgreSQL schema view name (e.g., name = c(\"schema\",\"view\")) save query . NULL, temporary view \".rpostgis_TEMPview\" used temporarily (within function scope). ... pgGetGeomQ, arguments pgGetGeom","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetRast.html","id":null,"dir":"Reference","previous_headings":"","what":"Load raster from PostGIS database into R. — pgGetRast","title":"Load raster from PostGIS database into R. — pgGetRast","text":"Retrieve rasters PostGIS table terra SpatRaster object","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetRast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load raster from PostGIS database into R. — pgGetRast","text":"","code":"pgGetRast(   conn,   name,   rast = \"rast\",   bands = 1,   boundary = NULL,   clauses = NULL,   returnclass = \"terra\",   progress = TRUE )"},{"path":"https://cidree.github.io/rpostgis/reference/pgGetRast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load raster from PostGIS database into R. — pgGetRast","text":"conn connection object PostgreSQL database name character string specifying PostgreSQL schema table/view name holding geometry (e.g., name = c(\"schema\",\"table\")) rast Name column name holding raster object. Defaults \"rast\". bands Index number(s) band(s) retrieve (defaults 1). special case (bands = TRUE) returns bands raster. See also 'Details' boundary sf object, SpatVector object, numeric. spatial object provided, bounding box used select part raster import. Alternatively, numeric vector (c([top], [bottom], [right], [left])) indicating projection-specific limits clip raster. value provided, default boundary = NULL return full raster. clauses character, optional SQL append modify select query table. Must begin ''. returnclass 'terra' default; 'raster' raster objects. progress whether show progress bar (TRUE default). progress bar mark progress reading bands database.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetRast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load raster from PostGIS database into R. — pgGetRast","text":"SpatRaster; raster; RasterStack object","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetRast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load raster from PostGIS database into R. — pgGetRast","text":"Since version 1.5.0, function retrieve SpatRaster objects terra package default. argument returnclass can used return raster objects instead. argument bands can take argument: index desirable band (e.g. bands = 2 fetch second band raster). one index several bands (e.g. bands = c(2,4) return SpatRaster two bands). bands raster (bands = TRUE).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetRast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load raster from PostGIS database into R. — pgGetRast","text":"David Bucklin david.bucklin@gmail.com Adrián Cidre González adrian.cidre@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetRast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load raster from PostGIS database into R. — pgGetRast","text":"","code":"if (FALSE) { # \\dontrun{ pgGetRast(conn, c(\"schema\", \"tablename\")) pgGetRast(conn, c(\"schema\", \"DEM\"), boundary = c(55,     50, 17, 12)) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/pgGetSRID.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SRID(s) from a geometry/geography column in a full table — pgGetSRID","title":"Get SRID(s) from a geometry/geography column in a full table — pgGetSRID","text":"Get SRID(s) geometry/geography column full table","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgGetSRID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SRID(s) from a geometry/geography column in a full table — pgGetSRID","text":"","code":"pgGetSRID(conn, name, geom)"},{"path":"https://cidree.github.io/rpostgis/reference/pgGetSRID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SRID(s) from a geometry/geography column in a full table — pgGetSRID","text":"conn PostgreSQL connection name schema/table name geom geometry geography column name","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgInsert.html","id":null,"dir":"Reference","previous_headings":"","what":"Inserts data into a PostgreSQL table. — pgInsert","title":"Inserts data into a PostgreSQL table. — pgInsert","text":"function deprecated favour pgWriteGeom() removed future release. function takes take R sp object (Spatial* Spatial*DataFrame), regular data.frame, performs database insert (table creation, table exist) database. new.id specified, new sequential integer field added data frame insert. Spatial*-objects (data frame), new ID column created default name \"gid\". function use st_as_text geography types, st_as_binary geometry types. event function database error, database uses ROLLBACK revert previous state. user specifies return.pgi = TRUE, data preparation successful, function return pgi object (see next paragraph), regardless whether insert successful . object can useful debugging, re-used data.obj pgInsert; (e.g., data preparation slow, exact data needs inserted tables two separate tables databases). return.pgi = FALSE (default), function return TRUE successful insert FALSE failed inserts. Use function df.mode = TRUE save data frames Spatial*-class objects database \"data frame mode\". Along normal dbwriteDataFrame operation, proj4string spatial data also saved, re-attached data using pgGetGeom import data. Note attributes Spatial* objects saved (e.g., coords.nrs, used specify column index x/y columns SpatialPoints*). pgi objects list containing four character strings: (1) .table, table name created inserted (2) db.new.table, SQL statement create new table, (3) db.cols.insert, character string database column names insert , (4) insert.data, character string data insert.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgInsert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inserts data into a PostgreSQL table. — pgInsert","text":"","code":"pgInsert(   conn,   name,   data.obj,   geom = \"geom\",   df.mode = FALSE,   partial.match = FALSE,   overwrite = FALSE,   new.id = NULL,   row.names = FALSE,   upsert.using = NULL,   alter.names = FALSE,   encoding = NULL,   return.pgi = FALSE,   df.geom = NULL,   geog = FALSE )"},{"path":"https://cidree.github.io/rpostgis/reference/pgInsert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inserts data into a PostgreSQL table. — pgInsert","text":"conn connection object PostgreSQL database name character string specifying PostgreSQL schema table name (e.g., name = c(\"schema\",\"table\")). already existing, table created. table already exists, function check R data frame columns match database columns, , insert. , insert aborted. argument partial.match allows inserts partial matches data frame database column names, overwrite allows overwriting existing database table. data.obj Spatial* Spatial*DataFrame, data.frame geom character string. Spatial* datasets, name geometry/(geography) column database table.  (existing created; defaults \"geom\"). special name \"geog\" automatically set geog TRUE. df.mode Logical; Whether write (Spatial) data frame data frame mode (preserving data frame column attributes row.names). new table must created mode (overwrite set TRUE), row.names, alter.names, new.id arguments ignored (see dbWriteDataFrame information). partial.match Logical; allow insert partial column matches data frame database table. TRUE, columns R data frame compared existing database table name.  Columns data frame exactly match database table inserted database table. overwrite Logical; true, new table (name) overwrite existing table (name) database. Note: overwriting view must done manually (e.g., dbDrop). new.id Character, name new sequential integer ID column added table insert (spatial objects without data frames, column created even left NULL defaults name \"gid\"). partial.match = TRUE column exist database table, discarded. row.names Whether add data frame row names database table. Column name '.R_rownames'. upsert.using Character, name column(s) database table constraint name used identify already-existing rows table, updated rather inserted. column(s) must unique constraint already created database table (e.g., primary key). Requires PostgreSQL 9.5+. alter.names Logical, whether make database column names DB-compliant (remove special characters/capitalization). Default FALSE.  (must set FALSE match non-standard names existing database table.) encoding Character vector length 2, containing /encodings data (function base::iconv()). example, dataset contain certain latin characters (e.g., accent marks), database UTF-8, use encoding = c(\"latin1\", \"UTF-8\"). Left NULL, conversion done. return.pgi Whether return formatted list insert parameters (.e., pgi object; see function details.) df.geom Character vector, name character column R data.frame storing PostGIS geometries, argument can used insert geometry stored character type data.frame (use Spatial* data types). column name used (e.g., df.geom = \"geom\"), column type generic (GEOMETRY); use two-length character vector (e.g., df.geom = c(\"geom\", \"(POINT,4326)\") also specify specific PostGIS geometry type SRID column. recommended new tables/overwrites, since method change existing column type. geog Logical; Whether write spatial data PostGIS 'GEOGRAPHY' type. default, FALSE, unless geom = \"geog\".","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgInsert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inserts data into a PostgreSQL table. — pgInsert","text":"Returns TRUE insertion successful, FALSE failed, pgi object specified.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgInsert.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inserts data into a PostgreSQL table. — pgInsert","text":"David Bucklin david.bucklin@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgInsert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inserts data into a PostgreSQL table. — pgInsert","text":"","code":"if (FALSE) { # \\dontrun{ library(sp) data(meuse) coords <- SpatialPoints(meuse[, c(\"x\", \"y\")]) spdf <- SpatialPointsDataFrame(coords, meuse)  ## Insert data in new database table pgInsert(conn, name = c(\"public\", \"meuse_data\"), data.obj = spdf)  ## The same command will insert into already created table (if all R ## columns match) pgInsert(conn, name = c(\"public\", \"meuse_data\"), data.obj = spdf)  ## If not all database columns match, need to use partial.match = TRUE, ## where non-matching columns are not inserted colnames(spdf@data)[4] <- \"cu\" pgInsert(conn, name = c(\"public\", \"meuse_data\"), data.obj = spdf,     partial.match = TRUE) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/pgInsertizeGeom.html","id":null,"dir":"Reference","previous_headings":"","what":"Format R data objects for insert into a PostgreSQL table. — pgInsertizeGeom","title":"Format R data objects for insert into a PostgreSQL table. — pgInsertizeGeom","text":"internal rpostgis functions take R sp sf object (Spatial*, Spatial*DataFrame sf; pgInsertizeGeom), data frame (pgInsertize) return pgi list object, can used function pgInsert insert rows object database table. (Note functions modification database, prepares data insert.) function pgInsert wrapper around functions, pgInsertize* used situations data preparation insert need separated.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgInsertizeGeom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format R data objects for insert into a PostgreSQL table. — pgInsertizeGeom","text":"","code":"pgInsertizeGeom(   data.obj,   geom = \"geometry\",   create.table = NULL,   force.match = NULL,   conn = NULL,   new.id = NULL,   row.names = FALSE,   alter.names = FALSE,   partial.match = FALSE,   df.mode = FALSE,   geog = FALSE )  pgInsertize(   data.obj,   create.table = NULL,   force.match = NULL,   conn = NULL,   new.id = NULL,   row.names = FALSE,   alter.names = FALSE,   partial.match = FALSE,   df.mode = FALSE )"},{"path":"https://cidree.github.io/rpostgis/reference/pgInsertizeGeom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format R data objects for insert into a PostgreSQL table. — pgInsertizeGeom","text":"data.obj Spatial* Spatial*DataFrame, data frame pgInsertize. geom character string, name geometry column database table. (existing created; defaults 'geom'). create.table character, schema table PostgreSQL table create (actual table creation done later pgWriteGeom().) Column names converted PostgreSQL-compliant names. Default NULL (new table created). force.match character, schema table PostgreSQL table compare columns data frame .  specified partial.match = TRUE columns data frame exactly match database table kept, reordered match database table. NULL, columns kept order given data frame. conn database connection (table given \"force.match\" parameter) new.id character, name new sequential integer ID column added table.  (spatial objects without data frames, column created even left NULL defaults name \"gid\"). row.names Whether add data frame row names database table. Column name '.R_rownames'. alter.names Logical, whether make database column names DB-compliant (remove special characters). Default TRUE.  (set FALSE match non-standard names existing database table using force.match setting.) partial.match Logical; force.match set  true, columns R data frame compared existing database table name. columns data frame exactly match database table inserted database table. df.mode Logical; Whether write data data frame mode (preserving data frame column attributes row.names). new table must created mode (overwrite set TRUE), row.names, alter.names, new.id arguments ignored (see dbWriteDataFrame information. geog Logical; Whether write spatial data PostGIS 'GEOGRAPHY' type.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgInsertizeGeom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format R data objects for insert into a PostgreSQL table. — pgInsertizeGeom","text":"pgi list containing four character strings: (1) .table, table name created inserted , specified either create.table force.match (else NULL) (2) db.new.table, SQL statement create new table, specified create.table (else NULL), (3) db.cols.insert, character string database column names insert , (4) insert.data, character string data insert. See examples usage within pgInsert function.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgInsertizeGeom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format R data objects for insert into a PostgreSQL table. — pgInsertizeGeom","text":"entire data frame prepared default, unless force.match specifies database table (along database connection conn), case R column names compared force.match column names, exact matches formatted inserted. new database table can also prepared created using create.table argument.  new.id specified, new sequential integer field added data frame.  Spatial*-objects (data frame), new.id created default name gid.  pgInsertizeGeom, R package wkb installed, function uses writeWKB translate geometries spatial types (faster large datasets), otherwise rgeos function writeWKT used.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgInsertizeGeom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Format R data objects for insert into a PostgreSQL table. — pgInsertizeGeom","text":"David Bucklin david.bucklin@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgInsertizeGeom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format R data objects for insert into a PostgreSQL table. — pgInsertizeGeom","text":"","code":"if (FALSE) { # \\dontrun{ library(sp) data(meuse) coords <- SpatialPoints(meuse[, c(\"x\", \"y\")]) spdf <- SpatialPointsDataFrame(coords, meuse)  ## Format data for insert pgi.new <- pgInsertizeGeom(spdf, geom = \"point_geom\", create.table = c(\"schema\",     \"table\"), new.id = \"pt_gid\") print(pgi.new)  ## Insert data in database table (note that an error will be given if ## all insert columns do not have exactly matching database table ## columns) pgWriteGeom(conn = conn, data.obj = pgi.new)  ## Inserting into existing table pgi.existing <- pgInsertizeGeom(spdf, geom = \"point_geom\", force.match = c(\"schema\",     \"table\"), conn = conn) ## A warning message is given, since the \"dist.m\" column is not found ## in the database table (it was changed to \"dist_m\" in pgi.new to ## make name DB-compliant). All other columns are prepared for insert. print(pgi.existing)  pgWriteGeom(conn = conn, data.obj = pgi.existing) } # } if (FALSE) { # \\dontrun{ ## Format regular (non-spatial) data frame for insert using ## pgInsertize connect to database data <- data.frame(a = c(1, 2, 3), b = c(4, NA, 6), c = c(7,     \"text\", 9))  ## Format non-spatial data frame for insert values <- pgInsertize(data.obj = data)  ## Insert data in database table (note that an error will be given if ## all insert columns do not match exactly to database table columns) pgWriteGeom(conn, data.obj = values, name = c(\"schema\", \"table\"))  ## Run with forced matching of database table column names values <- pgInsertize(data.obj = data, force.match = c(\"schema\",     \"table\"), conn = conn)  pgWriteGeom(conn, data.obj = values) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/pgListGeom.html","id":null,"dir":"Reference","previous_headings":"","what":"List geometries/rasters — pgListGeom","title":"List geometries/rasters — pgListGeom","text":"List geometry/(geography) raster columns available PostGIS database.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgListGeom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List geometries/rasters — pgListGeom","text":"","code":"pgListGeom(conn, geog = TRUE)  pgListRast(conn)"},{"path":"https://cidree.github.io/rpostgis/reference/pgListGeom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List geometries/rasters — pgListGeom","text":"conn PostgreSQL database connection. geog Logical. pgListGeom, whether include PostGIS geography-type columns stored database","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgListGeom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List geometries/rasters — pgListGeom","text":"exec = TRUE, data frame schema, table, geometry/(geography) raster (pgListRast) column, geometry/(geography) type.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgListGeom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List geometries/rasters — pgListGeom","text":"David Bucklin david.bucklin@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgListGeom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List geometries/rasters — pgListGeom","text":"","code":"if (FALSE) { # \\dontrun{ pgListGeom(conn)  pgListRast(conn) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/pgMakePts.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a POINT or LINESTRING geometry field. — pgMakePts","title":"Add a POINT or LINESTRING geometry field. — pgMakePts","text":"Add new POINT LINESTRING geometry field.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgMakePts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a POINT or LINESTRING geometry field. — pgMakePts","text":"","code":"pgMakePts(   conn,   name,   colname = \"geom\",   x = \"x\",   y = \"y\",   srid,   index = TRUE,   display = TRUE,   exec = TRUE )  pgMakeStp(   conn,   name,   colname = \"geom\",   x = \"x\",   y = \"y\",   dx = \"dx\",   dy = \"dy\",   srid,   index = TRUE,   display = TRUE,   exec = TRUE )"},{"path":"https://cidree.github.io/rpostgis/reference/pgMakePts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a POINT or LINESTRING geometry field. — pgMakePts","text":"conn connection object. name character string specifying PostgreSQL schema table name (e.g., name = c(\"schema\",\"table\")) colname character string specifying name new geometry column. x name x/longitude field. y name y/latitude field. srid valid SRID new geometry. index Logical. Whether create index new geometry. display Logical. Whether display query (defaults TRUE). exec Logical. Whether execute query (defaults TRUE). dx name dx field (.e. increment x direction). dy name dy field (.e. increment y direction).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgMakePts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a POINT or LINESTRING geometry field. — pgMakePts","text":"exec = TRUE, returns TRUE geometry field successfully created.","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/pgMakePts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add a POINT or LINESTRING geometry field. — pgMakePts","text":"Mathieu Basille mathieu@basille.org Adrián Cidre González adrian.cidre@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgMakePts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a POINT or LINESTRING geometry field. — pgMakePts","text":"","code":"## Examples use a dummy connection from DBI package conn <- DBI::ANSI()  ## Create a new POINT field called 'pts_geom' pgMakePts(conn, name = c(\"schema\", \"table\"), colname = \"pts_geom\",     x = \"longitude\", y = \"latitude\", srid = 4326, exec = FALSE) #> Query not executed: #> ALTER TABLE \"schema\".\"table\" ADD COLUMN \"pts_geom\" geometry(POINT, 4326); #> ℹ CREATE INDEX \"table_pts_geom_idx\" ON \"schema\".\"table\" USING GIST (\"pts_geom\"); #> ✖ Query not executed #> ℹ UPDATE \"schema\".\"table\" #> SET \"pts_geom\" = ST_SetSRID(ST_MakePoint(\"longitude\", \"latitude\"), 4326) #> WHERE \"longitude\" IS NOT NULL AND \"latitude\" IS NOT NULL; #> ✖ Query not executed  ## Create a new LINESTRING field called 'stp_geom' pgMakeStp(conn, name = c(\"schema\", \"table\"), colname = \"stp_geom\",     x = \"longitude\", y = \"latitude\", dx = \"xdiff\", dy = \"ydiff\",     srid = 4326, exec = FALSE) #> ℹ ALTER TABLE \"schema\".\"table\" ADD COLUMN \"stp_geom\" geometry(LINESTRING, 4326); #> ℹ CREATE INDEX \"table_stp_geom_idx\" ON \"schema\".\"table\" USING GIST (\"stp_geom\"); #> ✖ Query not executed #> ℹ UPDATE \"schema\".\"table\" #> SET \"stp_geom\" = ST_SetSRID(ST_MakeLine( #>     ARRAY[ST_MakePoint(\"longitude\", \"latitude\"),  #>           ST_MakePoint(\"longitude\" + \"xdiff\", \"latitude\" + \"ydiff\")] #>     ), 4326) #> WHERE \"xdiff\" IS NOT NULL AND \"ydiff\" IS NOT NULL; #> ✖ Query not executed"},{"path":"https://cidree.github.io/rpostgis/reference/pgPostGIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and create PostGIS extension. — pgPostGIS","title":"Check and create PostGIS extension. — pgPostGIS","text":"function checks availability PostGIS extension, available, installed, install . Additionally, can also install Topology, Tiger Geocoder, SFCGAL Raster extensions.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgPostGIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and create PostGIS extension. — pgPostGIS","text":"","code":"pgPostGIS(   conn,   topology = FALSE,   tiger = FALSE,   sfcgal = FALSE,   raster = FALSE,   display = TRUE,   exec = TRUE )"},{"path":"https://cidree.github.io/rpostgis/reference/pgPostGIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and create PostGIS extension. — pgPostGIS","text":"conn connection object (required, even exec = FALSE). topology Logical. Whether check/install Topology extension. tiger Logical. Whether check/install Tiger Geocoder extension. also install extensions \"fuzzystrmatch\", \"address_standardizer\", \"address_standardizer_data_us\" available. sfcgal Logical. Whether check/install SFCGAL extension. raster Logical. Whether check/install Raster extension display Logical. Whether display query (defaults TRUE). exec Logical. Whether execute query (defaults TRUE).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgPostGIS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and create PostGIS extension. — pgPostGIS","text":"exec = TRUE, returns (invisibly) TRUE PostGIS installed.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgPostGIS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check and create PostGIS extension. — pgPostGIS","text":"Mathieu Basille mathieu@basille.org Adrián Cidre González adrian.cidre@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgPostGIS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and create PostGIS extension. — pgPostGIS","text":"","code":"## 'exec = FALSE' does not install any extension, but nevertheless ## check for available and installed extensions: if (FALSE) { # \\dontrun{     pgPostGIS(con, topology = TRUE, tiger = TRUE, sfcgal = TRUE,         exec = FALSE) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/pgSRID.html","id":null,"dir":"Reference","previous_headings":"","what":"Find (or create) PostGIS SRID based on CRS object. — pgSRID","title":"Find (or create) PostGIS SRID based on CRS object. — pgSRID","text":"function takes sf::st_crs()-class object PostgreSQL database connection (PostGIS extension), returns matching SRID(s) CRS. match found, new entry can created PostgreSQL spatial_ref_sys table using parameters specified CRS. New entries created auth_name = 'rpostgis_custom', default value next open value 880001-889999 (different SRID value can entered desired.)","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgSRID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find (or create) PostGIS SRID based on CRS object. — pgSRID","text":"","code":"pgSRID(conn, crs, create.srid = FALSE, new.srid = NULL)"},{"path":"https://cidree.github.io/rpostgis/reference/pgSRID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find (or create) PostGIS SRID based on CRS object. — pgSRID","text":"conn connection object PostgreSQL database. crs crs object, created call sf::st_crs(). create.srid Logical. matching SRID found, new SRID created? User must write access spatial_ref_sys table. new.srid Integer. Optional SRID give newly created SRID. left NULL (default), next open value srid spatial_ref_sys 880001 889999 used.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgSRID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find (or create) PostGIS SRID based on CRS object. — pgSRID","text":"SRID code (integer).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgSRID.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find (or create) PostGIS SRID based on CRS object. — pgSRID","text":"David Bucklin david.bucklin@gmail.com Adrián Cidre González adrian.cidre@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgSRID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find (or create) PostGIS SRID based on CRS object. — pgSRID","text":"","code":"if (FALSE) { # \\dontrun{ drv <- dbDriver(\"PostgreSQL\") conn <- dbConnect(drv, dbname = \"dbname\", host = \"host\", port = \"5432\",     user = \"user\", password = \"password\") (crs <- sf::st_crs(\"+proj=longlat\")) pgSRID(conn, crs) (crs2 <- sf::st_crs(paste(\"+proj=stere\", \"+lat_0=52.15616055555555 +lon_0=5.38763888888889\",     \"+k=0.999908 +x_0=155000 +y_0=463000\", \"+ellps=bessel\",     \"+towgs84=565.237,50.0087,465.658,-0.406857,0.350733,-1.87035,4.0812\",     \"+units=m\"))) pgSRID(conn, crs2, create.srid = TRUE) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteGeom.html","id":null,"dir":"Reference","previous_headings":"","what":"Inserts data into a PostgreSQL table. — pgWriteGeom","title":"Inserts data into a PostgreSQL table. — pgWriteGeom","text":"function takes take R sf, SpatVector sp object (Spatial* Spatial*DataFrame); regular data.frame, performs database insert (table creation, table exist) database.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteGeom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inserts data into a PostgreSQL table. — pgWriteGeom","text":"","code":"pgWriteGeom(   conn,   name,   data.obj,   geom = \"geom\",   df.mode = FALSE,   partial.match = FALSE,   overwrite = FALSE,   new.id = NULL,   row.names = FALSE,   upsert.using = NULL,   alter.names = FALSE,   encoding = NULL,   return.pgi = FALSE,   df.geom = NULL,   geog = FALSE )  # S3 method for class 'pgi' print(x, ...)"},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteGeom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inserts data into a PostgreSQL table. — pgWriteGeom","text":"conn connection object PostgreSQL database name character string specifying PostgreSQL schema table name (e.g., name = c(\"schema\",\"table\")). already existing, table created. table already exists, function check R data frame columns match database columns, , insert. , insert aborted. argument partial.match allows inserts partial matches data frame database column names, overwrite allows overwriting existing database table. data.obj sf,SpatVector, sp-class, data.frame geom character string. Spatial* datasets, name geometry/(geography) column database table.  (existing created; defaults \"geom\"). special name \"geog\" automatically set geog TRUE. df.mode Logical; Whether write (Spatial) data frame data frame mode (preserving data frame column attributes row.names). new table must created mode (overwrite set TRUE), row.names, alter.names, new.id arguments ignored (see dbWriteDataFrame information). partial.match Logical; allow insert partial column matches data frame database table. TRUE, columns R data frame compared existing database table name.  Columns data frame exactly match database table inserted database table. overwrite Logical; true, new table (name) overwrite existing table (name) database. Note: overwriting view must done manually (e.g., dbDrop). new.id Character, name new sequential integer ID column added table insert (spatial objects without data frames, column created even left NULL defaults name \"gid\"). partial.match = TRUE column exist database table, discarded. row.names Whether add data frame row names database table. Column name '.R_rownames'. upsert.using Character, name column(s) database table constraint name used identify already-existing rows table, updated rather inserted. column(s) must unique constraint already created database table (e.g., primary key). Requires PostgreSQL 9.5+. alter.names Logical, whether make database column names DB-compliant (remove special characters/capitalization). Default FALSE.  (must set FALSE match non-standard names existing database table.) encoding Character vector length 2, containing /encodings data (function iconv. example, dataset contain certain latin characters (e.g., accent marks), database UTF-8, use encoding = c(\"latin1\", \"UTF-8\"). Left NULL, conversion done. return.pgi Whether return formatted list insert parameters (.e., pgi object; see function details.) df.geom Character vector, name character column R data.frame storing PostGIS geometries, argument can used insert geometry stored character type data.frame (use Spatial* data types). column name used (e.g., df.geom = \"geom\"), column type generic (GEOMETRY); use two-length character vector (e.g., df.geom = c(\"geom\", \"(POINT,4326)\") also specify specific PostGIS geometry type SRID column. recommended new tables/overwrites, since method change existing column type. geog Logical; Whether write spatial data PostGIS 'GEOGRAPHY' type. default, FALSE, unless geom = \"geog\". x list class pgi ... arguments used.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteGeom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inserts data into a PostgreSQL table. — pgWriteGeom","text":"Returns TRUE insertion successful, FALSE failed, pgi object specified.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteGeom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inserts data into a PostgreSQL table. — pgWriteGeom","text":"new.id specified, new sequential integer field added data frame insert. spatial-objects (data frame), new ID column created default name \"gid\". function use sf::st_as_text() geography types, sf::st_as_binary() geometry types. event function database error, database uses ROLLBACK revert previous state. user specifies return.pgi = TRUE, data preparation successful, function return pgi object (see next paragraph), regardless whether insert successful . object can useful debugging, re-used data.obj pgWriteGeom; (e.g., data preparation slow, exact data needs inserted tables two separate tables databases). return.pgi = FALSE (default), function return TRUE successful insert FALSE failed inserts. Use function df.mode = TRUE save data frames spatial-class objects database \"data frame mode\". Along normal dbwriteDataFrame operation, proj4string spatial data also saved, re-attached data using pgGetGeom import data. Note attributes spatial objects saved (e.g., coords.nrs, used specify column index x/y columns *POINT SpatialPoints*). pgi objects list containing four character strings: (1) .table, table name created inserted (2) db.new.table, SQL statement create new table, (3) db.cols.insert, character string database column names insert , (4) insert.data, character string data insert.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteGeom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inserts data into a PostgreSQL table. — pgWriteGeom","text":"David Bucklin david.bucklin@gmail.com Adrián Cidre González adrian.cidre@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteGeom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inserts data into a PostgreSQL table. — pgWriteGeom","text":"","code":"if (FALSE) { # \\dontrun{ library(sf) pts <- st_sf(a = 1:2, geom = st_sfc(st_point(0:1), st_point(1:2)), crs = 4326)  ## Insert data in new database table pgWriteGeom(conn, name = c(\"public\", \"my_pts\"), data.obj = pts)  ## The same command will insert into already created table (if all R ## columns match) pgWriteGeom(conn, name = c(\"public\", \"my_pts\"), data.obj = pts)  ## If not all database columns match, need to use partial.match = TRUE, ## where non-matching columns are not inserted names(pts)[1] <- \"b\" pgWriteGeom(conn, name = c(\"public\", \"my_pts\"), data.obj = pts,     partial.match = TRUE) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteRast.html","id":null,"dir":"Reference","previous_headings":"","what":"Write raster to PostGIS database table. — pgWriteRast","title":"Write raster to PostGIS database table. — pgWriteRast","text":"Sends R raster PostGIS database table.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteRast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write raster to PostGIS database table. — pgWriteRast","text":"","code":"pgWriteRast(   conn,   name,   raster,   bit.depth = NULL,   blocks = NULL,   constraints = TRUE,   overwrite = FALSE,   append = FALSE )"},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteRast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write raster to PostGIS database table. — pgWriteRast","text":"conn connection object PostgreSQL database. name character string specifying PostgreSQL schema database (necessary) table name hold raster (e.g., name = c(\"schema\",\"table\")). raster terra SpatRaster; objects raster package (RasterLayer, RasterBrick, RasterStack); SpatialGrid* SpatialPixels* sp package. bit.depth bit depth raster. set 32-bit (unsigned int, signed int, float, depending data) left null, can specified (character) one PostGIS pixel types (see http://postgis.net/docs/RT_ST_BandPixelType.html). blocks Optional desired number blocks (tiles) split raster resulting PostGIS table. specified one two-length (columns, rows) integer vector. See also 'Details'. constraints Whether create constraints raster data. Recommended leave TRUE unless applying constraints manually (see http://postgis.net/docs/RT_AddRasterConstraints.html). Note constraint notices may print console, depending PostgreSQL server settings. overwrite Whether overwrite existing table (name). append Whether append existing table (name).","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteRast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write raster to PostGIS database table. — pgWriteRast","text":"TRUE (invisibly) successful import.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteRast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write raster to PostGIS database table. — pgWriteRast","text":"SpatRaster band names stored array column \"band_names\", restored R imported function pgGetRast(). Rasters sp raster packages converted terra objects prior insert. blocks = NULL, number block vary raster size, default value 100 copies data memory point time. specified number blocks desired, set blocks one two-length integer vector. Note fewer, larger blocks generally results faster write times.","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteRast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write raster to PostGIS database table. — pgWriteRast","text":"David Bucklin david.bucklin@gmail.com Adrián Cidre González adrian.cidre@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/pgWriteRast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write raster to PostGIS database table. — pgWriteRast","text":"","code":"if (FALSE) { # \\dontrun{ pgWriteRast(conn, c(\"schema\", \"tablename\"), raster_name)  # basic test r <- terra::rast(nrows=180, ncols=360, xmin=-180, xmax=180,     ymin=-90, ymax=90, vals=1) pgWriteRast(conn, c(\"schema\", \"test\"), raster = r,     bit.depth = \"2BUI\", overwrite = TRUE) } # }"},{"path":"https://cidree.github.io/rpostgis/reference/rpostgis-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rpostgis: R Interface to a PostGIS Database — rpostgis-package","title":"rpostgis: R Interface to a PostGIS Database — rpostgis-package","text":"rpostgis package provides interface R PostGIS-enabled PostgreSQL databases, allowing seamless transfer spatial data. supports vector (points, lines, polygons) raster data reading writing. Additionally, offers convenience functions perform common operations within PostgreSQL/PostGIS.","code":""},{"path":"https://cidree.github.io/rpostgis/reference/rpostgis-package.html","id":"features","dir":"Reference","previous_headings":"","what":"Features","title":"rpostgis: R Interface to a PostGIS Database — rpostgis-package","text":"Vector Data Support: Points, lines, polygons Raster Data Support: Read write raster data PostGIS Functions: Convenient wrappers common PostGIS tasks PostgreSQL Connectivity: Interface database interaction","code":""},{"path":"https://cidree.github.io/rpostgis/reference/rpostgis-package.html","id":"getting-started","dir":"Reference","previous_headings":"","what":"Getting Started","title":"rpostgis: R Interface to a PostGIS Database — rpostgis-package","text":"1. Loading package connecting database begin, load rpostgis package establish connection PostgreSQL database:   Example:   2. Checking Installing PostGIS Verify PostGIS installed database. , attempt install :   function return TRUE invisibly PostGIS installed ready use. 3. Closing Database Connection finishing work, make sure close connection:","code":"library(rpostgis) con <- dbConnect(\"PostgreSQL\", dbname = \"<dbname>\", host = \"<host>\",                  user = \"<user>\", password = \"<password>\") con <- dbConnect(\"PostgreSQL\", dbname = \"rpostgis\", host = \"localhost\",                  user = \"postgres\", password = \"postgres\") pgPostGIS(con) dbDisconnect(con)"},{"path":"https://cidree.github.io/rpostgis/reference/rpostgis-package.html","id":"list-of-functions","dir":"Reference","previous_headings":"","what":"List of Functions","title":"rpostgis: R Interface to a PostGIS Database — rpostgis-package","text":"view list available functions rpostgis, use:","code":"library(help = \"rpostgis\")"},{"path":"https://cidree.github.io/rpostgis/reference/rpostgis-package.html","id":"additional-notes","dir":"Reference","previous_headings":"","what":"Additional Notes","title":"rpostgis: R Interface to a PostGIS Database — rpostgis-package","text":"Ensure PostgreSQL instance PostGIS-enabled using rpostgis functions. functions provided simplify working spatial data interacting PostGIS-enabled database.","code":""},{"path":[]},{"path":"https://cidree.github.io/rpostgis/reference/rpostgis-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rpostgis: R Interface to a PostGIS Database — rpostgis-package","text":"Maintainer: Adrián Cidre González adrian.cidre@gmail.com (ORCID) Authors: Mathieu Basille mathieu@basille.org (ORCID) David Bucklin david.bucklin@gmail.com","code":""},{"path":"https://cidree.github.io/rpostgis/reference/warn_deprecated_rc.html","id":null,"dir":"Reference","previous_headings":"","what":"Warning for deprecated sp and raster — warn_deprecated_rc","title":"Warning for deprecated sp and raster — warn_deprecated_rc","text":"Warning deprecated sp raster","code":""},{"path":"https://cidree.github.io/rpostgis/reference/warn_deprecated_rc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warning for deprecated sp and raster — warn_deprecated_rc","text":"","code":"warn_deprecated_rc(data, what)"},{"path":"https://cidree.github.io/rpostgis/reference/warn_deprecated_rc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warning for deprecated sp and raster — warn_deprecated_rc","text":"data dataset text show","code":""},{"path":"https://cidree.github.io/rpostgis/reference/warn_deprecated_sp.html","id":null,"dir":"Reference","previous_headings":"","what":"Warning for deprecated sp and raster — warn_deprecated_sp","title":"Warning for deprecated sp and raster — warn_deprecated_sp","text":"Warning deprecated sp raster","code":""},{"path":"https://cidree.github.io/rpostgis/reference/warn_deprecated_sp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warning for deprecated sp and raster — warn_deprecated_sp","text":"","code":"warn_deprecated_sp(data, what)"},{"path":"https://cidree.github.io/rpostgis/reference/warn_deprecated_sp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warning for deprecated sp and raster — warn_deprecated_sp","text":"data dataset text show","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-160","dir":"Changelog","previous_headings":"","what":"rpostgis 1.6.0","title":"rpostgis 1.6.0","text":"OVERALL CHANGES pgGetGeom(), pgGetBoundary() now use SRID defining CRS instead proj4 code. pgWriteRast(): argument progress removed. pgWriteGeom() now throws error CRS undefined. Functions return TRUE value, now return invisibly (pgMakePts(), ) Use cli better user feedback raster sp now suggested imported rpostgis Use lifecycle warnings encourage users use sf terra, don’t use sp raster anymore rpostgis. pgSRID(): now throws error CRS undefined BUG FIXES Fix error dbWriteDataFrame() causing data frames dttm columns unable written database. CHANGES Update website","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-151","dir":"Changelog","previous_headings":"","what":"rpostgis 1.5.1","title":"rpostgis 1.5.1","text":"CRAN release: 2023-11-20 BUG FIXES Fix error pgGetRast provoking error raster imported using rpostgis. Now required terra version >= 1.6.7. CHANGES repository rpostgis transferred new location: https://github.com/Cidree/rpostgis website package now located http://cidree.github.io/rpostgis/","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-150","dir":"Changelog","previous_headings":"","what":"rpostgis 1.5.0","title":"rpostgis 1.5.0","text":"CRAN release: 2023-10-12 Remove startup message upcoming retirement. New startup message informs sf/terra transition, new maintenance package switched next update package. OVERALL CHANGES Transition rpostgis sf/terra ecosystem. functions pgGet* new argument returnclass, function message inform output class. function pgInsert deprecated favour pgWriteGeom. reason change keep naming consistency functions package. added function message inform deprecation. pgGetBoundary: now returns sfc object (.e. list-column geometries) default, new argument returnclass allows choose also terra SpatVector objects, sp Spatial* objects. pgGetGeom: argument boundary now accepts also sf SpatVector objects. object returned function changed sf object default, new argument returnclass allows choose also terra SpatVector objects, sp Spatial* objects. pgGetRast: added details functioning argument bands; allow sf SpatVector objects argument boundary; output function now terra SpatRaster default, raster objects can specified new argument returnclass. Add optional progress bar measure progress import. pgInsert: now possible insert sf SpatVector objects argument data.obj. also possible insert geometry type existing sf objects (.e. simple multi point, linestring, polygon, curve, surface; complex geometries compound curve, curve polygon geometrycollection). pgWriteRast: argument raster now accepts SpatRaster objects. default value blocks argument works slightly different now. uses function blocks terra package, uses number copies data may memory time. Since big rasters can take time write, optional progress bar added function. pgPostGIS: added new argument raster install postgis_raster extension.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-144","dir":"Changelog","previous_headings":"","what":"rpostgis 1.4.4","title":"rpostgis 1.4.4","text":"CRAN release: 2023-05-06 Added startup message display message upcoming package retirement September 2023.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-143","dir":"Changelog","previous_headings":"","what":"rpostgis 1.4.3","title":"rpostgis 1.4.3","text":"CRAN release: 2019-11-20 OVERALL CHANGES RPostgres::Postgres() driver can now used connection. rpostgis functional driver, considered experimental may function expected cases. default RPostgreSQL::PostgreSQL() driver recommended use cases. NEW FEATURES pgWriteRast: Now allows insert append = TRUE existing PostGIS raster table. Note existing constraints dropped insert, re-created insert (constraints = TRUE). allows one raster entered table. recommended alter raster names (names(raster) <-) prior import ensure raster table unique entry band_names column. See pgGetRast’s new clauses argument importing subsets raster table. pgGetRast: clauses argument allows specify additional SQL (e.g. clauses = \"band_names = '{{landcover_2010}}'\") select specific subset raster table import.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-142","dir":"Changelog","previous_headings":"","what":"rpostgis 1.4.2","title":"rpostgis 1.4.2","text":"CRAN release: 2018-11-12 BUG FIXES fixed bug affecting pgWriteRast, affecting rasters irregular x/y resolutions. fixed bug affecting pgInsert, single-part polygons holes counted MultiPolygons, causing geometry column defined MultiPolygon. affect import database, caused error single-part polygons (without holes) attempted inserted existing table.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-141","dir":"Changelog","previous_headings":"","what":"rpostgis 1.4.1","title":"rpostgis 1.4.1","text":"CRAN release: 2018-08-17 DOCUMENTATION rpostgis now new home: https://mablab.org/rpostgis/ Documentation prepared using pkgdown. BUG FIXES Fixed bug affecting dbReadDataFrame, datetimes assigned PostgreSQL time zone instead system timezone. resulted incorrect time assignments PostgreSQL time zone setting match system’s time zone setting. Tables PostgreSQL written dbWriteDataFrame affected correct time assigned.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-140","dir":"Changelog","previous_headings":"","what":"rpostgis 1.4.0","title":"rpostgis 1.4.0","text":"CRAN release: 2017-12-10 NEW FEATURES dbAddKey dbIndex: support added keys indexes referencing multiple columns. pgWriteRast: new blocks argument specify exact number desired blocks new raster PostGIS table. Default block size (blocks = NULL) retain previous functionality, though minimum block size (rows columns) increased 100 (previously 80). BUG FIXES pgWriteRast: fixed alignment issue affecting high-precision (generally decimal-degree unit) based raster writing, PostGIS able add alignment constraint tiles newly-created raster.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-130","dir":"Changelog","previous_headings":"","what":"rpostgis 1.3.0","title":"rpostgis 1.3.0","text":"CRAN release: 2017-06-30 OVERALL CHANGES Example data removed, now part extension package rpostgisLT NEW FUNCTIONS pgListRast list raster columns PostGIS database NEW FEATURES pgGetRast: re-written faster reading rasters database. Multi-band raster import now supported (band argument changed bands, can given vector integers, TRUE return bands). Default still import first band (1) raster. Multi-band rasters imported RasterBrick-class objects. raster blocks imperfect alignment, PostGIS function ST_SnapToGrid applied register raster according upper left pixel full raster dataset. pgGetRast/pgWriteRast: now support sp-class SpatialGrid* SpatialPixels* type objects. class raster written pgWriteRast saved database column, re-applied raster import pgGetRast. “Data frame mode” Spatial* objects: now saves proj4string Spatial* objects data frame mode writing pgInsert. re-imported using pgGetGeom, saved proj4string database proj4string (defined column’s SRID) equivalent. Otherwise, database proj4string used. pgGetRast/pgWriteRast: original R proj4string saved raster database table, re-imported, saved proj4string database proj4string (defined column’s SRID) equivalent. Otherwise, database proj4string used. pgGetGeom: now includes boundary parameter, spatially subset GEOMETRY/GEOGRPAHY objects return (usage pgGetRast). pgGetBoundary: now includes clauses parameter, usage pgGetGeom UPDATES pgWriteRast: now attempts write new SRID spatial_ref_sys, one resolved raster’s proj4string. query-constructor functions (e.g. dbDrop) now return nothing (previously returned TRUE) exec = FALSE. pgGetGeom: .cols = FALSE now necessary reading geometry column (e.g., query mode one-column table). BUG FIXES pgWriteRast: fixed bug affecting imported raster’s metadata regarding upper left pixel location (returned PostGIS function ST_UpperLeftX/ST_UpperLeftY(rast)). Previously, pgWriteRast erroneously applying lower left pixel location value. affect actual data raster, usage within PostGIS, however affected export raster external files, viewing GIS. pgWriteRast: fixed bug constraints written tables given without schema name name. pgGetGeom: fixed bug one-column .cols specifications. dbReadDataFrame: infolocs columns type POSIXlt now re-import time zone attribute correctly (previously just used database time zone).","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-121","dir":"Changelog","previous_headings":"","what":"rpostgis 1.2.1","title":"rpostgis 1.2.1","text":"CRAN release: 2017-05-07 NEW FEATURES Support PostGIS GEOGRAPHY types added, pgGetGeom, pgListGeom, pgGetBoundary, pgInsert. pgInsert, Spatial* object can uploaded PostGIS geography using geog = TRUE. BUG FIXES pgInsert pgWriteRast: fixed bug causing failed uploads multiple PostGIS SRIDs found pgSRID spatial object, now uses first one returned. pgGetGeom: fixed bug loading non-spatial columns names ‘x’ ‘y’ point geometries. UPDATES pgGetRast: digits argument default lowered 5 (raster::rasterFromXYZ). Resolution raster now determined using PostGIS functions directly applied R raster. allows (cases) faster recognition uneven cell sizes, result error.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-120","dir":"Changelog","previous_headings":"","what":"rpostgis 1.2.0","title":"rpostgis 1.2.0","text":"CRAN release: 2017-03-14 NEW FEATURES pgGetGeom: new query argument allows pgGetGeom specify full SQL query returns GEOMETRY instead existing table/view. desired, query can saved database new view using name argument. pgInsert: now can insert geometries stored character data.frames using df.geom argument. BUG FIXES Add support materialized views (read geometries pgGetGeom, drop dbDrop).","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-111","dir":"Changelog","previous_headings":"","what":"rpostgis 1.1.1","title":"rpostgis 1.1.1","text":"CRAN release: 2017-01-18 BUG FIXES pgGetGeom: fixed bug causing failed imports views due usage RPostgreSQL::dbListFields (changed rpostgis::dbTableInfo). fixed bug data frame mode writing (e.g., pgInsert(...,df.mode =   TRUE) dbWriteDataFrame) factor names included comma.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-110","dir":"Changelog","previous_headings":"","what":"rpostgis 1.1.0","title":"rpostgis 1.1.0","text":"CRAN release: 2017-01-06 OVERALL CHANGES Added four example datasets (prefix roe_). NEW FUNCTIONS pgWriteRast upload R Raster* datasets PostGIS database tables. dbWriteDataFrame/dbReadDataFrame: Write/read data frame mode /database table (see ). NEW FEATURES pgInsert can write data frame mode df.mode = TRUE (default FALSE). pgInsert now defaults ‘alter.names = FALSE’. pgGetGeom try read Spatial*DataFrames data frame mode (affect import non-data frame mode tables). pgGetRast now band argument select band database raster import. BUG FIXES pgGetGeom: Fix bug affecting one-column selections .cols argument line polygon imports. DATA FRAME MODE Writing data frame mode new database tables (overwriting existing one). save column names appear R, along column data types attributes. done adding metadata lookup table table’s schema named ‘.R_df_defs’ (created present). also adds two field fixed names database table: ‘.R_rownames’ (storing row.names data frame), ‘.db_pkid’, new integer primary key. Existing columns data.frame matching names automatically changed. Spatial*DataFrames writing continue use pgInsert, can write data frame mode df.mode = TRUE. flexible writing Spatial*DataFrames data.frames database (including inserts existing database tables), use pgInsert df.mode = FALSE (default).","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-104","dir":"Changelog","previous_headings":"","what":"rpostgis 1.0.4","title":"rpostgis 1.0.4","text":"OVERALL CHANGE Add package tests repository. BUG FIXES pgGetGeom: Fix bug causing errors using ‘ORDER …’ statements clauses argument.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-103","dir":"Changelog","previous_headings":"","what":"rpostgis 1.0.3","title":"rpostgis 1.0.3","text":"CRAN release: 2016-10-29 OVERALL CHANGE allow  executed queries. NEW FUNCTIONS dbBuildTableQuery (internal): Builds CREATE TABLE query data frame object. dbExistsTable (internal): Check PostgreSQL table exists. dbConnCheck (internal): Check supported PostgreSQL connection.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-102","dir":"Changelog","previous_headings":"","what":"rpostgis 1.0.2","title":"rpostgis 1.0.2","text":"CRAN release: 2016-09-26 OVERALL CHANGES Updated use current search path schema default functions (previous versions default schema fixed ‘public’). NEW FUNCTIONS dbVersion (internal): PostgreSQL version checking. NEW FEATURES pgInsert now provides ‘upsert’ functionality (INSERT CONFLICT UPDATE) ‘upsert.using’ argument. Requires PostgreSQL version 9.5+.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-101","dir":"Changelog","previous_headings":"","what":"rpostgis 1.0.1","title":"rpostgis 1.0.1","text":"NEW FEATURES pgPostGIS now returns TRUE non-standard installs.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-100","dir":"Changelog","previous_headings":"","what":"rpostgis 1.0.0","title":"rpostgis 1.0.0","text":"CRAN release: 2016-08-20 OVERALL CHANGES Initial release CRAN. NEW FEATURES pgGetGeom now handles regular PostGIS Geometry data table imports.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-010","dir":"Changelog","previous_headings":"","what":"rpostgis 0.10","title":"rpostgis 0.10","text":"OVERALL CHANGES Big package cleaning. Changed non-PostGIS related functions db- instead pg-. functions returning actual object now returns TRUE successful.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-083","dir":"Changelog","previous_headings":"","what":"rpostgis 0.8.3","title":"rpostgis 0.8.3","text":"OVERALL CHANGE Change ‘str’ ‘query’ Now uses messages instead cat print SQL code.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-082","dir":"Changelog","previous_headings":"","what":"rpostgis 0.8.2","title":"rpostgis 0.8.2","text":"OVERALL CHANGES Changed file extension .R.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-081","dir":"Changelog","previous_headings":"","what":"rpostgis 0.8.1","title":"rpostgis 0.8.1","text":"OVERALL CHANGES Fixed dependencies (DESCRIPTION, namespace, ::).","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-08","dir":"Changelog","previous_headings":"","what":"rpostgis 0.8","title":"rpostgis 0.8","text":"NEW FUNCTIONS pgPostGIS: Check create PostGIS extension. NEW FEATURES pgSchema: Now returns TRUE schema exists (whether already available just created).","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-07","dir":"Changelog","previous_headings":"","what":"rpostgis 0.7","title":"rpostgis 0.7","text":"OVERALL CHANGES Initial merge pgis2r package, incorporating support loading geometry/raster objects stored PostgreSQL databases R. NEW FUNCTIONS pgGetRast: Load raster PostGIS database. pgGetLines: Load PostGIS linestring geometry PostgreSQL table/view R. pgGetPolys: Load PostGIS polygon geometry PostgreSQL table/view R.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-061","dir":"Changelog","previous_headings":"","what":"rpostgis 0.6.1","title":"rpostgis 0.6.1","text":"OVERALL CHANGES Update roxygen2 4.0.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-06","dir":"Changelog","previous_headings":"","what":"rpostgis 0.6","title":"rpostgis 0.6","text":"NEW FUNCTIONS pgGetPts: Retrieve point geometries.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-05","dir":"Changelog","previous_headings":"","what":"rpostgis 0.5","title":"rpostgis 0.5","text":"OVERALL CHANGES Code completely commented cleaned. NEW FUNCTIONS pgColumn: Add remove column (replaces pgDropColumn).","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-04","dir":"Changelog","previous_headings":"","what":"rpostgis 0.4","title":"rpostgis 0.4","text":"NEW FUNCTIONS pgMakePts pgMakeStp: Add POINT LINESTRING geometry field.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-031","dir":"Changelog","previous_headings":"","what":"rpostgis 0.3.1","title":"rpostgis 0.3.1","text":"OVERALL CHANGES Global change display = TRUE print executed non-executed query.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-03","dir":"Changelog","previous_headings":"","what":"rpostgis 0.3","title":"rpostgis 0.3","text":"OVERALL CHANGES Non executed examples added function. display = TRUE defaults functions. NEW FUNCTIONS pgAsDate: Converts timestamp. pgDrop: Drop table/view/schema. pgSchema: Create schema. NEW FEATURES pgComment: Allows comments schemas.","code":""},{"path":"https://cidree.github.io/rpostgis/news/index.html","id":"rpostgis-02","dir":"Changelog","previous_headings":"","what":"rpostgis 0.2","title":"rpostgis 0.2","text":"OVERALL CHANGES Change package name rpostgis. Change every db- function pg- function, order avoid confusion standard DBI RPostgreSQL functions.","code":""}]
